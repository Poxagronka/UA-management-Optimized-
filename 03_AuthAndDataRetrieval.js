// 03_AuthAndDataRetrieval.gs - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
const AUTH_CONFIG = {
  baseUrl: "https://app.appgrowth.com",
  username: "alexander.sakovich", 
  password: "eesh9IL8weecheif4phai3wi",
  maxAttempts: 5
};

function loginAndSaveCampaigns() {
  const startTime = new Date();
  UTILS.log('üïí Auth: –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è loginAndSaveCampaigns');
  
  const targetSheets = UTILS.getTargetSheets();
  if (targetSheets.length === 0) {
    UTILS.log('‚ùå Auth: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –ª–∏—Å—Ç—ã');
    return;
  }
  
  UTILS.log(`üìã Auth: –ù–∞–π–¥–µ–Ω–æ ${targetSheets.length} —Ü–µ–ª–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤: ${targetSheets.map(s => s.getName()).join(', ')}`);
  
  // –°–±–æ—Ä –≤—Å–µ—Ö Campaign ID
  let allCampaignIds = [];
  let campaignSheetMap = {};
  
  for (const sheet of targetSheets) {
    const campaigns = collectCampaignIdsSafe(sheet, sheet.getName());
    UTILS.log(`üìä Auth: –õ–∏—Å—Ç "${sheet.getName()}" - –Ω–∞–π–¥–µ–Ω–æ ${campaigns.length} –∫–∞–º–ø–∞–Ω–∏–π`);
    
    allCampaignIds = allCampaignIds.concat(campaigns.map(c => c.id));
    
    campaigns.forEach(campaign => {
      campaignSheetMap[campaign.id] = {
        sheetName: sheet.getName(),
        rowIndex: campaign.rowIndex
      };
    });
  }
  
  allCampaignIds = [...new Set(allCampaignIds)];
  UTILS.log(`üìä Auth: –ù–∞–π–¥–µ–Ω–æ ${allCampaignIds.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π`);
  
  if (allCampaignIds.length === 0) {
    UTILS.log('‚ö†Ô∏è Auth: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π');
    return;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
  const campaignsData = fetchCampaignsData(allCampaignIds);
  if (!campaignsData || Object.keys(campaignsData).length === 0) {
    UTILS.log('‚ùå Auth: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–π');
    return;
  }
  
  UTILS.log(`‚úÖ Auth: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${Object.keys(campaignsData).length} –∫–∞–º–ø–∞–Ω–∏–π`);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–∞—Ö
  updateSheetsData(targetSheets, campaignsData, campaignSheetMap);
  
  const executionTime = (new Date() - startTime) / 1000;
  UTILS.log(`üèÅ Auth: –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${executionTime.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
}

function collectCampaignIdsSafe(sheet, sheetName) {
  UTILS.log(`üîç Auth: –°–æ–±–∏—Ä–∞–µ–º Campaign ID –∏–∑ –ª–∏—Å—Ç–∞ "${sheetName}"`);
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  // –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫
  const idColumnIndex = UTILS.findColumnIndex(headers, ['campaign id/link', 'campaign id', 'id']);
  const statusColumnIndex = UTILS.findColumnIndex(headers, ['campaign status', 'status']);
  
  if (idColumnIndex === -1) {
    UTILS.log(`‚ùå Auth: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å Campaign ID –≤ –ª–∏—Å—Ç–µ "${sheetName}"`);
    return [];
  }
  
  UTILS.log(`üìã Auth: –õ–∏—Å—Ç "${sheetName}" - –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ ID: ${idColumnIndex}, Status: ${statusColumnIndex}`);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const validRowsData = UTILS.getValidRows(sheet, {
    statusFilter: 'running',
    statusColumn: statusColumnIndex
  });
  
  const campaignIds = [];
  let validCount = 0, skippedByInvalidId = 0;
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤–∞–ª–∏–¥–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º
  validRowsData.forEach(row => {
    const campaignIdCell = String(row.data[idColumnIndex] || "");
    const campaignId = UTILS.extractCampaignId(campaignIdCell);
    
    if (campaignId) {
      campaignIds.push({ 
        id: campaignId, 
        rowIndex: row.index + 1
      });
      validCount++;
    } else {
      skippedByInvalidId++;
    }
  });
  
  UTILS.log(`üìä Auth: –õ–∏—Å—Ç "${sheetName}" - –≤–∞–ª–∏–¥–Ω—ã—Ö: ${validCount}, –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ID: ${skippedByInvalidId}`);
  return campaignIds;
}

function fetchCampaignsData(campaignIds) {
  UTILS.log(`üîê Auth: –ù–∞—á–∏–Ω–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (${AUTH_CONFIG.maxAttempts} –ø–æ–ø—ã—Ç–æ–∫)`);
  
  for (let attempt = 0; attempt < AUTH_CONFIG.maxAttempts; attempt++) {
    try {
      UTILS.log(`üîÑ Auth: –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${AUTH_CONFIG.maxAttempts}`);
      
      // –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞
      UTILS.log(`üì• Auth: –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞`);
      const loginPageRes = UrlFetchApp.fetch(`${AUTH_CONFIG.baseUrl}/auth/`, {
        muteHttpExceptions: true,
        followRedirects: false,
        headers: { "User-Agent": "Mozilla/5.0 (compatible; Google-Apps-Script)" }
      });
      
      if (loginPageRes.getResponseCode() !== 200) {
        UTILS.log(`‚ùå Auth: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞: ${loginPageRes.getResponseCode()}`);
        throw new Error('Login page failed');
      }
      
      const loginPageText = loginPageRes.getContentText();
      UTILS.log(`üìÑ Auth: –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ (${loginPageText.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤
      let csrfToken = null;
      
      // –ú–µ—Ç–æ–¥ 1: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π input
      let match = loginPageText.match(/name=["']csrf_token["']\s+value=["']([^"']+)["']/i);
      if (match) csrfToken = match[1];
      
      // –ú–µ—Ç–æ–¥ 2: –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
      if (!csrfToken) {
        match = loginPageText.match(/value=["']([^"']+)["']\s+name=["']csrf_token["']/i);
        if (match) csrfToken = match[1];
      }
      
      // –ú–µ—Ç–æ–¥ 3: —Å type=hidden
      if (!csrfToken) {
        match = loginPageText.match(/<input[^>]+name=["']csrf_token["'][^>]+value=["']([^"']+)["']/i);
        if (match) csrfToken = match[1];
      }
      
      // –ú–µ—Ç–æ–¥ 4: –ø–æ–∏—Å–∫ –ª—é–±–æ–≥–æ input —Å csrf_token
      if (!csrfToken) {
        match = loginPageText.match(/csrf_token["'][^>]*value=["']([^"']+)["']/i);
        if (match) csrfToken = match[1];
      }
      
      if (!csrfToken) {
        UTILS.log(`‚ùå Auth: CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML (${loginPageText.substring(0, 500)}...)`);
        throw new Error('CSRF token not found');
      }
      
      UTILS.log(`üîë Auth: CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${csrfToken.substring(0, 10)}...`);
      
      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ cookies
      const loginHeaders = loginPageRes.getAllHeaders();
      const initialCookies = extractCookies(loginHeaders["Set-Cookie"]);
      UTILS.log(`üç™ Auth: –ò–∑–≤–ª–µ—á–µ–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ cookies`);
      
      // –®–∞–≥ 2: –õ–æ–≥–∏–Ω
      UTILS.log(`üîê Auth: –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω`);
      const loginResult = performLogin(csrfToken, initialCookies);
      if (!loginResult.success) {
        UTILS.log(`‚ùå Auth: –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞`);
        throw new Error('Login failed');
      }
      
      UTILS.log(`‚úÖ Auth: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞`);
      
      // –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–º–ø–∞–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
      UTILS.log(`üåê Auth: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–º–ø–∞–Ω–∏–π`);
      const campaignsData = fetchCampaignsPageWithBetterParsing(loginResult.cookies, campaignIds);
      if (campaignsData && Object.keys(campaignsData).length > 0) {
        UTILS.log(`üì¶ Auth: –ü–æ–ª—É—á–µ–Ω–æ ${Object.keys(campaignsData).length} –∫–∞–º–ø–∞–Ω–∏–π`);
        return campaignsData;
      }
      
      UTILS.log(`‚ö†Ô∏è Auth: –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–π`);
      
    } catch (error) {
      UTILS.log(`‚ùå Auth: –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: ${error.message}`);
      if (attempt < AUTH_CONFIG.maxAttempts - 1) {
        const sleepTime = (attempt + 1) * 5000;
        UTILS.log(`‚è±Ô∏è Auth: –û–∂–∏–¥–∞–Ω–∏–µ ${sleepTime}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π`);
        Utilities.sleep(sleepTime);
      }
    }
  }
  
  UTILS.log(`‚ùå Auth: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ ${AUTH_CONFIG.maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
  return {};
}

function extractCookies(setCookieHeader) {
  if (!setCookieHeader) return "";
  const cookieArray = Array.isArray(setCookieHeader) ? setCookieHeader : [setCookieHeader];
  return cookieArray.map(c => c.split(";")[0]).join("; ");
}

function performLogin(csrfToken, initialCookies) {
  const loginPayload = {
    csrf_token: csrfToken,
    username: AUTH_CONFIG.username,
    password: AUTH_CONFIG.password,
    remember: "y"
  };
  
  const loginOptions = {
    method: "post",
    payload: loginPayload,
    headers: {
      "Cookie": initialCookies,
      "Content-Type": "application/x-www-form-urlencoded",
      "Origin": AUTH_CONFIG.baseUrl,
      "Referer": `${AUTH_CONFIG.baseUrl}/auth/`,
      "User-Agent": "Mozilla/5.0 (compatible; Google-Apps-Script)"
    },
    muteHttpExceptions: true,
    followRedirects: false
  };
  
  const loginRes = UrlFetchApp.fetch(`${AUTH_CONFIG.baseUrl}/auth/`, loginOptions);
  const statusCode = loginRes.getResponseCode();
  
  UTILS.log(`üîê Auth: –û—Ç–≤–µ—Ç –ª–æ–≥–∏–Ω–∞ - —Å—Ç–∞—Ç—É—Å: ${statusCode}`);
  
  if (statusCode !== 302) {
    UTILS.log(`‚ùå Auth: –û–∂–∏–¥–∞–ª—Å—è —Ä–µ–¥–∏—Ä–µ–∫—Ç (302), –ø–æ–ª—É—á–µ–Ω ${statusCode}`);
    return { success: false };
  }
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ session cookies
  const loginHeaders = loginRes.getAllHeaders();
  const loginCookies = loginHeaders["Set-Cookie"] || loginHeaders["set-cookie"];
  
  if (!loginCookies) {
    UTILS.log(`‚ùå Auth: –ù–µ –ø–æ–ª—É—á–µ–Ω—ã cookies –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞`);
    return { success: false };
  }
  
  let sessionCookie = "", rememberToken = "";
  const cookiesArray = Array.isArray(loginCookies) ? loginCookies : [loginCookies];
  
  for (const cookie of cookiesArray) {
    if (String(cookie).includes("session=")) {
      const match = String(cookie).match(/session=[^;]+/);
      if (match) sessionCookie = match[0];
    }
    if (String(cookie).includes("remember_token=")) {
      const match = String(cookie).match(/remember_token=[^;]+/);
      if (match) rememberToken = match[0];
    }
  }
  
  if (!sessionCookie || !rememberToken) {
    UTILS.log(`‚ùå Auth: –ù–µ –Ω–∞–π–¥–µ–Ω—ã session cookies - session: ${!!sessionCookie}, remember: ${!!rememberToken}`);
    return { success: false };
  }
  
  UTILS.log(`üç™ Auth: –ü–æ–ª—É—á–µ–Ω—ã session cookies`);
  return { success: true, cookies: `${rememberToken}; ${sessionCookie}` };
}

function fetchCampaignsPageWithBetterParsing(cookies, campaignIds) {
  const options = {
    method: "get",
    headers: {
      "Cookie": cookies,
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
      "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
      "Cache-Control": "no-cache",
      "Pragma": "no-cache"
    },
    muteHttpExceptions: true,
    followRedirects: true
  };
  
  // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  for (let i = 0; i < 5; i++) {
    UTILS.log(`üì° Auth: –ó–∞–ø—Ä–æ—Å –∫–∞–º–ø–∞–Ω–∏–π - –ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/5`);
    
    const baseDelay = i > 0 ? 1500 * i : 0;
    if (baseDelay > 0) {
      UTILS.log(`‚è±Ô∏è Auth: –û–∂–∏–¥–∞–Ω–∏–µ ${baseDelay}–º—Å`);
      Utilities.sleep(baseDelay);
    }
    
    const url = `${AUTH_CONFIG.baseUrl}/campaigns/?_nocache=${Date.now()}_${i}`;
    const response = UrlFetchApp.fetch(url, options);
    
    if (response.getResponseCode() === 200) {
      const content = response.getContentText();
      UTILS.log(`üìÑ Auth: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç (${content.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö
      const hasTableData = content.includes('<table class="table');
      const hasJsonData = content.includes('window.__DATA__') || (content.includes('"id":') && content.includes('"title":'));
      const hasTargetCampaigns = campaignIds.some(id => content.includes(`"id":${id}`));
      
      UTILS.log(`üîç Auth: –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ - Table: ${hasTableData}, JSON: ${hasJsonData}, Target campaigns: ${hasTargetCampaigns}`);
      
      if (content.length >= 300000 && (hasJsonData || hasTableData)) {
        UTILS.log(`‚úÖ Auth: –ü–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥`);
        const data = extractCampaignsDataAdvanced(content, campaignIds);
        
        if (Object.keys(data).length > 0) {
          UTILS.log(`‚úÖ Auth: –ò–∑–≤–ª–µ—á–µ–Ω–æ ${Object.keys(data).length} –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ HTML`);
          return data;
        }
      }
      
      // –ï—Å–ª–∏ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–µ
      if (hasTargetCampaigns) {
        UTILS.log(`üìä Auth: –ù–∞–π–¥–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥`);
        const minimalData = extractMinimalCampaignData(content, campaignIds);
        if (Object.keys(minimalData).length > 0) {
          UTILS.log(`üì¶ Auth: –ò–∑–≤–ª–µ—á–µ–Ω–æ ${Object.keys(minimalData).length} –∫–∞–º–ø–∞–Ω–∏–π (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)`);
          return minimalData;
        }
      }
      
      UTILS.log(`‚ö†Ô∏è Auth: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ`);
    } else {
      UTILS.log(`‚ùå Auth: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–º–ø–∞–Ω–∏–π: ${response.getResponseCode()}`);
    }
  }
  
  return {};
}

function extractCampaignsDataAdvanced(content, campaignIds) {
  UTILS.log(`üîç Auth: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π`);
  
  const result = {};
  
  // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ window.__DATA__
  const dataMatch = content.match(/window\.__DATA__\s*=\s*({.+?});/s);
  if (dataMatch) {
    UTILS.log(`üéØ Auth: –ù–∞–π–¥–µ–Ω window.__DATA__`);
    try {
      const data = JSON.parse(dataMatch[1]);
      if (data.campaigns && Array.isArray(data.campaigns)) {
        UTILS.log(`üìä Auth: –ù–∞–π–¥–µ–Ω–æ ${data.campaigns.length} –∫–∞–º–ø–∞–Ω–∏–π –≤ window.__DATA__`);
        return processCampaignsFromData(data.campaigns, campaignIds);
      }
    } catch (e) {
      UTILS.log(`‚ö†Ô∏è Auth: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ window.__DATA__: ${e.message}`);
    }
  }
  
  // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –≤ script —Ç–µ–≥–∞—Ö
  const scriptMatches = content.match(/<script[^>]*>([\s\S]*?)<\/script>/gi);
  if (scriptMatches) {
    UTILS.log(`üìã Auth: –ù–∞–π–¥–µ–Ω–æ ${scriptMatches.length} script —Ç–µ–≥–æ–≤`);
    
    for (let i = 0; i < scriptMatches.length; i++) {
      const scriptContent = scriptMatches[i].replace(/<\/?script[^>]*>/gi, '');
      
      // –ü–æ–∏—Å–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ JSON
      const jsonPatterns = [
        /\[\s*({[^{}]*"id"\s*:\s*\d+[^{}]*},?\s*)+\]/g,
        /{\s*"\d+":\s*{[^{}]*},?\s*}/g,
        /var\s+\w+\s*=\s*(\[\s*{[^]*}\s*\])/g,
        /campaigns\s*:\s*(\[[^\]]+\])/g
      ];
      
      for (const pattern of jsonPatterns) {
        const matches = scriptContent.match(pattern);
        if (matches) {
          for (const match of matches) {
            try {
              let jsonStr = match.replace(/^(var\s+\w+\s*=\s*)/, '').replace(/^campaigns\s*:\s*/, '').replace(/;$/, '');
              const parsed = JSON.parse(jsonStr);
              
              if (Array.isArray(parsed)) {
                const foundData = processCampaignsFromData(parsed, campaignIds);
                if (Object.keys(foundData).length > 0) {
                  UTILS.log(`‚úÖ Auth: –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ script ${i + 1}`);
                  return foundData;
                }
              }
            } catch (e) {
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
            }
          }
        }
      }
    }
  }
  
  UTILS.log(`‚ùå Auth: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–π –≤ JSON`);
  return result;
}

function processCampaignsFromData(campaignsArray, campaignIds) {
  const result = {};
  let matchedCount = 0;
  
  for (const campaign of campaignsArray) {
    if (!campaignIds.includes(String(campaign.id))) continue;
    
    const campaignId = String(campaign.id);
    result[campaignId] = {
      local: UTILS.extractLocale(campaign.title || ''),
      outOfBudget: campaign.out_of_budget === true,
      pausedBy: campaign.paused_by || campaign.paused_reason || '',
      dailyBudget: UTILS.parseNumber(campaign.daily_budget) || 0,
      source: UTILS.extractSource(campaign.title || '') || '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'
    };
    matchedCount++;
  }
  
  UTILS.log(`üéØ Auth: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${matchedCount} –∫–∞–º–ø–∞–Ω–∏–π —Å —Ü–µ–ª–µ–≤—ã–º —Å–ø–∏—Å–∫–æ–º`);
  return result;
}

function extractMinimalCampaignData(content, campaignIds) {
  UTILS.log(`üîç Auth: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π`);
  
  const result = {};
  
  for (const id of campaignIds) {
    // –ü–æ–∏—Å–∫ –±–ª–æ–∫–∞ —Å –∫–∞–º–ø–∞–Ω–∏–µ–π –ø–æ ID
    const campaignRegex = new RegExp(`\\{[^\\}]*"id"\\s*:\\s*${id}[^\\}]*\\}`, 'i');
    const campaignMatch = content.match(campaignRegex);
    
    if (campaignMatch) {
      const campaignBlock = campaignMatch[0];
      
      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
      const titleMatch = campaignBlock.match(/"title"\s*:\s*"([^"]+)"/i);
      if (titleMatch) {
        const title = titleMatch[1];
        result[id] = {
          local: UTILS.extractLocale(title),
          outOfBudget: campaignBlock.includes('"out_of_budget":true'),
          pausedBy: '',
          dailyBudget: 0,
          source: UTILS.extractSource(title) || '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'
        };
      }
    }
  }
  
  UTILS.log(`üì¶ Auth: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ - –∏–∑–≤–ª–µ—á–µ–Ω–æ ${Object.keys(result).length} –∫–∞–º–ø–∞–Ω–∏–π`);
  return result;
}

function updateSheetsData(targetSheets, campaignsData, campaignSheetMap) {
  UTILS.log(`üìù Auth: –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${targetSheets.length} –ª–∏—Å—Ç–æ–≤`);
  
  let totalUpdates = 0;
  
  for (const sheet of targetSheets) {
    const sheetName = sheet.getName();
    UTILS.log(`üìÑ Auth: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç "${sheetName}"`);
    
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const columnMap = {
      local: UTILS.findColumnIndex(headers, 'local'),
      outOfBudget: UTILS.findColumnIndex(headers, 'out of budget'),
      pausedBy: UTILS.findColumnIndex(headers, 'paused by'),
      dailyBudget: UTILS.findColumnIndex(headers, 'daily budget'),
      source: UTILS.findColumnIndex(headers, 'source')
    };
    
    UTILS.log(`üîç Auth: –õ–∏—Å—Ç "${sheetName}" - –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: ${Object.entries(columnMap).filter(([k,v]) => v !== -1).map(([k,v]) => `${k}:${v}`).join(', ')}`);
    
    const updates = [];
    let sheetUpdates = 0;
    
    for (const campaignId in campaignsData) {
      const sheetInfo = campaignSheetMap[campaignId];
      if (!sheetInfo || sheetInfo.sheetName !== sheetName) continue;
      
      const campaign = campaignsData[campaignId];
      const row = sheetInfo.rowIndex;
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      Object.entries(columnMap).forEach(([field, colIndex]) => {
        if (colIndex !== -1 && campaign[field] !== undefined) {
          if (field === 'source' && campaign[field] === '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ') return;
          
          updates.push({
            row,
            col: colIndex + 1,
            value: campaign[field]
          });
          sheetUpdates++;
        }
      });
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if (updates.length > 0) {
      UTILS.batchUpdate(sheet, updates);
    }
    
    totalUpdates += sheetUpdates;
    UTILS.log(`‚úÖ Auth: –õ–∏—Å—Ç "${sheetName}" - –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${sheetUpdates} —è—á–µ–µ–∫`);
  }
  
  UTILS.log(`üéâ Auth: –ò–¢–û–ì–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdates} —è—á–µ–µ–∫ –≤ ${targetSheets.length} –ª–∏—Å—Ç–∞—Ö`);
}