// 07_CampaignManager.gs - –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–º–ø–∞–Ω–∏–π
function manageCampaignActions() {
  UTILS.log('üéØ CampManager: –ù–∞—á–∏–Ω–∞–µ–º manageCampaignActions');
  
  const now = new Date();
  const currentHour = now.getHours();
  const timezone = now.toString().match(/GMT[+-]\d{4}/)?.[0] || 'Unknown';
  UTILS.log(`üïê CampManager: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toISOString()}, –ß–∞—Å: ${currentHour}, Timezone: ${timezone}`);
  
  // –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ - —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 3:00
  if (currentHour < 3) {
    UTILS.log(`‚è∞ CampManager: –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (${currentHour}:xx < 3:00). –í—ã—Ö–æ–¥.`);
    return;
  }
  
  UTILS.log('üîÑ CampManager: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏');
  restartStoppedCampaigns();
  
  UTILS.log('üìä CampManager: –£–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–º–ø–∞–Ω–∏—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å—Ç–∞–Ω–æ–≤–æ–∫ (–ø–æ—Å–ª–µ 3 AM)');
  manageCampaignsBasedOnInstalls();
  
  UTILS.log('‚úÖ CampManager: manageCampaignActions –∑–∞–≤–µ—Ä—à–µ–Ω');
}

function stopCampaignIfHighImpressionsOrSpend() {
  UTILS.log('üõë CampManager: –ù–∞—á–∏–Ω–∞–µ–º stopCampaignIfHighImpressionsOrSpend');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const currentHour = new Date().getHours();
  if (currentHour < 3) {
    UTILS.log(`‚è∞ CampManager: –§—É–Ω–∫—Ü–∏—è stopCampaignIfHighImpressionsOrSpend –ø—Ä–æ–ø—É—â–µ–Ω–∞ (${currentHour}:xx < 3:00)`);
    return;
  }
  
  const sheet = UTILS.getSheet("Planning", UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) {
    UTILS.log('‚ùå CampManager: –õ–∏—Å—Ç Planning –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  const columnMap = {
    campaignId: UTILS.findColumnIndex(headers, ['campaign id/link']),
    impressions: UTILS.findColumnIndex(headers, ['impressions']),
    spend14d: UTILS.findColumnIndex(headers, ['spend in the last 14 days']),
    cpi14d: UTILS.findColumnIndex(headers, ['average cpi in the last 14 days']),
    impressionsLimit: UTILS.findColumnIndex(headers, ['impressions limit'])
  };
  
  if (Object.values(columnMap).some(idx => idx === -1)) {
    UTILS.log('‚ùå CampManager: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  const validRows = UTILS.getValidRows(sheet);
  const campaignsToStop = [];
  
  validRows.forEach(row => {
    const campaignId = UTILS.extractCampaignId(row.data[columnMap.campaignId]);
    if (!UTILS.isValidId(campaignId)) return;
    
    const impressions = UTILS.parseNumber(row.data[columnMap.impressions]) || 0;
    const spend = UTILS.parseNumber(row.data[columnMap.spend14d]) || 0;
    const cpi = UTILS.parseNumber(row.data[columnMap.cpi14d]) || 0;
    const impressionsLimit = UTILS.parseNumber(row.data[columnMap.impressionsLimit]) || 2000;
    
    const highImpressions = impressions > impressionsLimit;
    const highSpendAndCPI = spend > 100 && cpi > 5;
    
    if (highImpressions || highSpendAndCPI) {
      campaignsToStop.push(campaignId);
    }
  });
  
  if (campaignsToStop.length > 0) {
    stopCampaigns(campaignsToStop);
    UTILS.log(`‚úÖ CampManager: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É ${campaignsToStop.length} –∫–∞–º–ø–∞–Ω–∏–π`);
  }
  
  UTILS.log('‚úÖ CampManager: stopCampaignIfHighImpressionsOrSpend –∑–∞–≤–µ—Ä—à–µ–Ω');
}

function restartStoppedCampaigns() {
  UTILS.log('üîÑ CampManager: –ù–∞—á–∏–Ω–∞–µ–º restartStoppedCampaigns');
  
  const sheet = UTILS.getSheet("Bundle Grouped Campaigns", UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) return;
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  const columnMap = {
    campaignId: UTILS.findColumnIndex(headers, ['campaign id/link']),
    stoppedByLimit: UTILS.findColumnIndex(headers, ['stopped by install limit'])
  };
  
  if (Object.values(columnMap).some(idx => idx === -1)) return;
  
  const validRows = UTILS.getValidRows(sheet);
  const today = UTILS.formatDate(new Date(), "yyyy-MM-dd");
  const campaignsToRestart = [];
  
  validRows.forEach(row => {
    const campaignId = UTILS.extractCampaignId(row.data[columnMap.campaignId]);
    const stoppedInfo = row.data[columnMap.stoppedByLimit];
    
    if (campaignId && stoppedInfo && String(stoppedInfo).includes("Yes")) {
      const dateMatch = String(stoppedInfo).match(/Yes\s*\((\d{4}-\d{2}-\d{2})/);
      if (dateMatch && dateMatch[1] && dateMatch[1] !== today) {
        campaignsToRestart.push(campaignId);
      } else if (!dateMatch) {
        campaignsToRestart.push(campaignId);
      }
    }
  });
  
  if (campaignsToRestart.length > 0) {
    startCampaigns(campaignsToRestart);
    UTILS.log(`‚úÖ CampManager: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ ${campaignsToRestart.length} –∫–∞–º–ø–∞–Ω–∏–π`);
  }
}

function manageCampaignsBasedOnInstalls() {
  UTILS.log('üìä CampManager: –ù–∞—á–∏–Ω–∞–µ–º manageCampaignsBasedOnInstalls');
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò
  const now = new Date();
  const currentHour = now.getHours();
  const currentMinute = now.getMinutes();
  const timeString = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`;
  
  UTILS.log(`üïê CampManager: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toISOString()}, –õ–æ–∫–∞–ª—å–Ω–æ–µ: ${timeString}`);
  
  // –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ù–ò –í –ö–û–ï–ú –°–õ–£–ß–ê–ï –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–æ 3:00
  if (currentHour < 3) {
    UTILS.log(`‚ùå CampManager: –ó–ê–ü–†–ï–©–ï–ù–û! –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –ª–∏–º–∏—Ç—É –∏–Ω—Å—Ç–∞–ª–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 3:00. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${timeString}`);
    UTILS.log(`‚ùå CampManager: –§—É–Ω–∫—Ü–∏—è manageCampaignsBasedOnInstalls –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–†–ï–†–í–ê–ù–ê`);
    return;
  }
  
  UTILS.log(`‚úÖ CampManager: –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ - ${timeString} >= 03:00. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.`);
  
  const sheet = UTILS.getSheet("Bundle Grouped Campaigns", UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) return;
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  const columnMap = {
    campaignId: UTILS.findColumnIndex(headers, ['campaign id/link']),
    todayInstalls: UTILS.findColumnIndex(headers, ['today installs']),
    status: UTILS.findColumnIndex(headers, ['campaign status']),
    stoppedByLimit: UTILS.findColumnIndex(headers, ['stopped by install limit']),
    installLimit: UTILS.findColumnIndex(headers, ['install limit'])
  };
  
  if (columnMap.stoppedByLimit === -1) {
    const lastColumn = sheet.getLastColumn();
    sheet.getRange(1, lastColumn + 1).setValue("Stopped by install limit");
    columnMap.stoppedByLimit = lastColumn;
  }
  
  if (columnMap.campaignId === -1 || columnMap.todayInstalls === -1) return;
  
  const validRows = UTILS.getValidRows(sheet);
  const campaignsToStop = [];
  const dateTimeFormat = UTILS.formatDate(now, "yyyy-MM-dd HH:mm");
  const today = UTILS.formatDate(now, "yyyy-MM-dd");
  const updates = [];
  
  UTILS.log(`üìä CampManager: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤ –∏–Ω—Å—Ç–∞–ª–æ–≤ –≤ ${dateTimeFormat}`);
  
  validRows.forEach(row => {
    const campaignId = UTILS.extractCampaignId(row.data[columnMap.campaignId]);
    const todayInstalls = UTILS.parseNumber(row.data[columnMap.todayInstalls]) || 0;
    const status = columnMap.status !== -1 ? row.data[columnMap.status] : "";
    const stoppedByLimit = columnMap.stoppedByLimit !== -1 ? row.data[columnMap.stoppedByLimit] : "";
    const installLimit = columnMap.installLimit !== -1 ? 
      (UTILS.parseNumber(row.data[columnMap.installLimit]) || 100) : 100;
    
    if (!UTILS.isValidId(campaignId)) return;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
    if (stoppedByLimit && String(stoppedByLimit).includes("Yes")) {
      const dateMatch = String(stoppedByLimit).match(/Yes\s*\((\d{4}-\d{2}-\d{2})/);
      if (dateMatch && dateMatch[1] === today) return;
    }
    
    if (todayInstalls > installLimit && (!status || status.toLowerCase() === "running")) {
      UTILS.log(`üõë CampManager: –ö–∞–º–ø–∞–Ω–∏—è ${campaignId} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç: ${todayInstalls} > ${installLimit}`);
      campaignsToStop.push(campaignId);
      
      if (columnMap.stoppedByLimit !== -1) {
        updates.push({ row: row.index + 1, col: columnMap.stoppedByLimit + 1, value: `Yes (${dateTimeFormat})` });
      }
      if (columnMap.status !== -1) {
        updates.push({ row: row.index + 1, col: columnMap.status + 1, value: "stopped" });
      }
    }
  });
  
  UTILS.log(`üìä CampManager: –ö –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ –ª–∏–º–∏—Ç—É –∏–Ω—Å—Ç–∞–ª–æ–≤: ${campaignsToStop.length}`);
  
  if (campaignsToStop.length > 0) {
    stopCampaigns(campaignsToStop);
    if (updates.length > 0) {
      UTILS.batchUpdate(sheet, updates);
    }
    UTILS.log(`‚úÖ CampManager: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${campaignsToStop.length} –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –ª–∏–º–∏—Ç—É –∏–Ω—Å—Ç–∞–ª–æ–≤ –≤ ${dateTimeFormat}`);
  } else {
    UTILS.log(`‚úÖ CampManager: –ù–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ –ª–∏–º–∏—Ç—É –∏–Ω—Å—Ç–∞–ª–æ–≤ –≤ ${dateTimeFormat}`);
  }
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—É–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –æ–±—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏)
function stopCampaigns(campaignIds) {
  UTILS.log(`üõë CampManager: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${campaignIds.length} –∫–∞–º–ø–∞–Ω–∏–π`);
  
  campaignIds.forEach(campaignId => {
    patchCampaign(campaignId, { active: false });
  });
}

function startCampaigns(campaignIds) {
  UTILS.log(`üîÑ CampManager: –ó–∞–ø—É—Å–∫–∞–µ–º ${campaignIds.length} –∫–∞–º–ø–∞–Ω–∏–π`);
  
  campaignIds.forEach(campaignId => {
    if (patchCampaign(campaignId, { active: true })) {
      updateCampaignStatus(campaignId, "running");
      updateStoppedByLimitStatus(campaignId, "No");
    }
  });
}

function patchCampaign(campaignId, payload) {
  const result = UTILS.fetchWithRetry(
    `${UTILS.CONFIG.BASE_URL_APPGROWTH}/campaigns2/${campaignId}`,
    {
      method: "patch",
      headers: {
        "Authorization": UTILS.CONFIG.API_TOKEN_APPGROWTH,
        "Content-Type": "application/json"
      },
      payload: JSON.stringify(payload)
    }
  );
  return result.success;
}

function updateCampaignStatus(campaignId, status) {
  updateCampaignField(campaignId, 'campaign status', status);
}

function updateStoppedByLimitStatus(campaignId, value) {
  updateCampaignField(campaignId, 'stopped by install limit', value);
}

function updateCampaignField(campaignId, fieldName, value) {
  const sheet = UTILS.getSheet("Bundle Grouped Campaigns", UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) return;
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  const campaignIdCol = UTILS.findColumnIndex(headers, ['campaign id/link']);
  const fieldCol = UTILS.findColumnIndex(headers, [fieldName.toLowerCase()]);
  
  if (campaignIdCol === -1 || fieldCol === -1) return;
  
  const validRows = UTILS.getValidRows(sheet);
  
  for (const row of validRows) {
    const rowCampaignId = UTILS.extractCampaignId(row.data[campaignIdCol]);
    if (rowCampaignId && rowCampaignId === campaignId) {
      sheet.getRange(row.index + 1, fieldCol + 1).setValue(value);
      return;
    }
  }
}