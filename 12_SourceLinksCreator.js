// 12_SourceLinksCreator.gs - –°–æ–∑–¥–∞—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
function createSourceLinksInPlanning() {
  UTILS.log('üîó SourceLinks: –ù–∞—á–∏–Ω–∞–µ–º createSourceLinksInPlanning');
  
  const SHEET_NAME = "Planning";
  const SOURCE_COLUMN_HEADER = "Source";
  const BATCH_SIZE = 20;
  const CACHE_EXPIRATION = 30 * 60;
  
  try {
    const sourceSheet = UTILS.getSheet(SHEET_NAME, UTILS.CONFIG.SPREADSHEET_ID);
    if (!sourceSheet) {
      UTILS.log(`‚ùå SourceLinks: –õ–∏—Å—Ç "${SHEET_NAME}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ`);
      throw new Error(`–õ–∏—Å—Ç "${SHEET_NAME}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ`);
    }
    
    const data = sourceSheet.getDataRange().getValues();
    if (data.length < 2) {
      UTILS.log(`‚ö†Ô∏è SourceLinks: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ "${SHEET_NAME}"`);
      return;
    }
    
    UTILS.log(`üìä SourceLinks: –ù–∞–π–¥–µ–Ω–æ ${data.length - 1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ "${SHEET_NAME}"`);
    
    const headers = data[0];
    const sourceColIndex = UTILS.findColumnIndex(headers, [SOURCE_COLUMN_HEADER.toLowerCase()]);
    
    if (sourceColIndex === -1) {
      UTILS.log(`‚ùå SourceLinks: –°—Ç–æ–ª–±–µ—Ü "${SOURCE_COLUMN_HEADER}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      throw new Error(`–°—Ç–æ–ª–±–µ—Ü "${SOURCE_COLUMN_HEADER}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    UTILS.log(`üîç SourceLinks: –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ "${SOURCE_COLUMN_HEADER}" –≤ –ø–æ–∑–∏—Ü–∏–∏ ${sourceColIndex}`);
    
    const targetSheetsMap = getTargetSheetsMapping();
    const targetSheetsCount = Object.keys(targetSheetsMap).length;
    UTILS.log(`üéØ SourceLinks: –ü–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ä—Ç–∞ ${targetSheetsCount} —Ü–µ–ª–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤`);
    
    if (targetSheetsCount === 0) {
      UTILS.log(`‚ö†Ô∏è SourceLinks: –ù–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫`);
      return;
    }
    
    const linkUpdates = prepareLinkUpdates(data, sourceColIndex, targetSheetsMap);
    UTILS.log(`üìù SourceLinks: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${linkUpdates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Å—ã–ª–æ–∫`);
    
    if (linkUpdates.length > 0) {
      applyLinkUpdatesBatch(sourceSheet, linkUpdates);
      UTILS.log(`‚úÖ SourceLinks: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ ${linkUpdates.length} —Å—Å—ã–ª–æ–∫`);
    } else {
      UTILS.log(`‚ö†Ô∏è SourceLinks: –ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è`);
    }
    
    UTILS.log('‚úÖ SourceLinks: createSourceLinksInPlanning –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    UTILS.log(`‚ùå SourceLinks: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`);
    UTILS.handleError(error, 'createSourceLinksInPlanning');
  }

  function getTargetSheetsMapping() {
    UTILS.log('üóÇÔ∏è SourceLinks: –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É —Ü–µ–ª–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤');
    
    const cacheKey = `target_sheets_mapping_${UTILS.CONFIG.TARGET_SPREADSHEET_ID}`;
    const cachedData = UTILS.cache.get(cacheKey);
    
    if (cachedData) {
      try {
        const parsed = JSON.parse(cachedData);
        UTILS.log(`üíæ SourceLinks: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –∏–∑ –∫–µ—à–∞ (${Object.keys(parsed).length} –ª–∏—Å—Ç–æ–≤)`);
        return parsed;
      } catch (e) {
        UTILS.log(`‚ö†Ô∏è SourceLinks: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–µ—à–∞, –ø–æ–ª—É—á–∞–µ–º –∑–∞–Ω–æ–≤–æ`);
      }
    }
    
    try {
      const targetSpreadsheet = SpreadsheetApp.openById(UTILS.CONFIG.TARGET_SPREADSHEET_ID);
      const targetSheets = targetSpreadsheet.getSheets();
      const sheetsMap = {};
      
      UTILS.log(`üìã SourceLinks: –ù–∞–π–¥–µ–Ω–æ ${targetSheets.length} –ª–∏—Å—Ç–æ–≤ –≤ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ`);
      
      targetSheets.forEach(sheet => {
        const sheetName = sheet.getName();
        const bundleId = extractBundleIdFromSheetName(sheetName);
        
        if (bundleId) {
          const bundleIdLower = bundleId.toLowerCase();
          sheetsMap[bundleIdLower] = {
            name: sheetName,
            gid: sheet.getSheetId(),
            url: `https://docs.google.com/spreadsheets/d/${UTILS.CONFIG.TARGET_SPREADSHEET_ID}/edit#gid=${sheet.getSheetId()}`,
            originalBundleId: bundleId
          };
        }
      });
      
      const validSheetsCount = Object.keys(sheetsMap).length;
      UTILS.log(`üéØ SourceLinks: –ò–∑–≤–ª–µ—á–µ–Ω–æ ${validSheetsCount} –≤–∞–ª–∏–¥–Ω—ã—Ö Bundle ID –∏–∑ ${targetSheets.length} –ª–∏—Å—Ç–æ–≤`);
      
      UTILS.cache.put(cacheKey, JSON.stringify(sheetsMap), CACHE_EXPIRATION);
      UTILS.log(`üíæ SourceLinks: –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–µ—à –Ω–∞ ${CACHE_EXPIRATION / 60} –º–∏–Ω—É—Ç`);
      
      return sheetsMap;
      
    } catch (error) {
      UTILS.log(`‚ùå SourceLinks: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤: ${error.message}`);
      return {};
    }
  }

  function extractBundleIdFromSheetName(sheetName) {
    if (!sheetName || typeof sheetName !== 'string') return null;
    
    const underscoreIndex = sheetName.lastIndexOf('_');
    if (underscoreIndex === -1 || underscoreIndex === sheetName.length - 1) return null;
    
    const bundleId = sheetName.substring(underscoreIndex + 1).trim();
    return bundleId.length > 0 ? bundleId : null;
  }

  function prepareLinkUpdates(allData, sourceColIndex, targetSheetsMap) {
    UTILS.log(`üîß SourceLinks: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è ${allData.length - 1} —Å—Ç—Ä–æ–∫`);
    
    const updates = [];
    let validSourcesCount = 0;
    let emptySourcesCount = 0;
    let matchedLinksCount = 0;
    
    for (let rowIndex = 1; rowIndex < allData.length; rowIndex++) {
      const sourceValue = allData[rowIndex][sourceColIndex];
      if (!sourceValue || String(sourceValue).trim() === '') {
        emptySourcesCount++;
        continue;
      }
      
      validSourcesCount++;
      const originalBundleId = String(sourceValue).trim();
      const bundleIdLower = originalBundleId.toLowerCase();
      
      if (targetSheetsMap[bundleIdLower]) {
        const targetSheet = targetSheetsMap[bundleIdLower];
        
        updates.push({
          row: rowIndex + 1,
          col: sourceColIndex + 1,
          bundleId: originalBundleId,
          displayText: originalBundleId,
          url: targetSheet.url,
          targetSheetName: targetSheet.name
        });
        
        matchedLinksCount++;
      }
    }
    
    UTILS.log(`üìä SourceLinks: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –í–∞–ª–∏–¥–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${validSourcesCount}, –ü—É—Å—Ç—ã—Ö: ${emptySourcesCount}, –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: ${matchedLinksCount}`);
    
    return updates;
  }

  function applyLinkUpdatesBatch(sheet, linkUpdates) {
    UTILS.log(`üîó SourceLinks: –ü—Ä–∏–º–µ–Ω—è–µ–º ${linkUpdates.length} —Å—Å—ã–ª–æ–∫ –±–∞—Ç—á–∞–º–∏ –ø–æ ${BATCH_SIZE}`);
    
    const totalBatches = Math.ceil(linkUpdates.length / BATCH_SIZE);
    let appliedCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < linkUpdates.length; i += BATCH_SIZE) {
      const batch = linkUpdates.slice(i, i + BATCH_SIZE);
      const batchNum = Math.floor(i / BATCH_SIZE) + 1;
      
      UTILS.log(`‚ö° SourceLinks: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${batchNum}/${totalBatches} (${batch.length} —Å—Å—ã–ª–æ–∫)`);
      
      batch.forEach(update => {
        try {
          const richTextValue = UTILS.createHyperlink(update.displayText, update.url);
          sheet.getRange(update.row, update.col).setRichTextValue(richTextValue);
          appliedCount++;
        } catch (error) {
          UTILS.log(`‚ùå SourceLinks: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è ${update.bundleId}: ${error.message}`);
          errorCount++;
        }
      });
      
      if (i + BATCH_SIZE < linkUpdates.length) {
        Utilities.sleep(100);
      }
    }
    
    UTILS.log(`üìä SourceLinks: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è - –£—Å–ø–µ—à–Ω–æ: ${appliedCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
  }
}

function clearTargetSheetsCache() {
  UTILS.log('üóëÔ∏è SourceLinks: –û—á–∏—â–∞–µ–º –∫–µ—à —Ü–µ–ª–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤');
  
  const cacheKey = `target_sheets_mapping_${UTILS.CONFIG.TARGET_SPREADSHEET_ID}`;
  UTILS.cache.remove(cacheKey);
  
  UTILS.log('‚úÖ SourceLinks: –ö–µ—à —Ü–µ–ª–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤ –æ—á–∏—â–µ–Ω');
}

function forceUpdateSourceLinks() {
  UTILS.log('üîÑ SourceLinks: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ (—Å –æ—á–∏—Å—Ç–∫–æ–π –∫–µ—à–∞)');
  
  clearTargetSheetsCache();
  createSourceLinksInPlanning();
  
  UTILS.log('‚úÖ SourceLinks: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}