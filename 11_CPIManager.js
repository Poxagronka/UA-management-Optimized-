// 11_CPIManager.gs - –ú–µ–Ω–µ–¥–∂–µ—Ä CPI
function checkHighCPI() {
  UTILS.log('üîç CPI: –ù–∞—á–∏–Ω–∞–µ–º checkHighCPI');
  
  const sheet = UTILS.getSheet('Bundle Grouped Campaigns', UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) {
    UTILS.log('‚ùå CPI: –õ–∏—Å—Ç Bundle Grouped Campaigns –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  UTILS.log(`üìä CPI: –ù–∞–π–¥–µ–Ω–æ ${data.length - 1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
  
  const columnMap = {
    cpi: UTILS.findColumnIndex(headers, ['today cpi', 'cpi today']),
    limit: UTILS.findColumnIndex(headers, ['limit cpi', 'cpi limit', 'limit —Åpi']),
    eroas: UTILS.findColumnIndex(headers, ['eroas d365']),
    isAutomated: UTILS.findColumnIndex(headers, ['is automated', 'automated'])
  };
  
  const foundColumns = Object.entries(columnMap).filter(([key, idx]) => idx !== -1);
  UTILS.log(`üîç CPI: –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: ${foundColumns.map(([key, idx]) => `${key}:${idx}`).join(', ')}`);
  
  if (columnMap.cpi === -1) {
    UTILS.log('‚ùå CPI: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ CPI');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  const validRows = UTILS.getValidRows(sheet);
  UTILS.log(`üìä CPI: –ù–∞–π–¥–µ–Ω–æ ${validRows.length} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
  
  const colors = [], weights = [], eroasColors = [], eroasWeights = [];
  const blackColor = '#000000', blueColor = '#4169E1', redColor = '#EF5350';
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
  for (let i = 0; i < data.length - 1; i++) {
    colors.push([blackColor]);
    weights.push(['normal']);
    if (columnMap.eroas !== -1) {
      eroasColors.push([blackColor]);
      eroasWeights.push(['normal']);
    }
  }
  
  let cpiLimitCount = 0, eroasLowCount = 0, automatedSkipped = 0;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫
  validRows.forEach(row => {
    const arrayIndex = row.index - 1; // –ò–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
    
    try {
      const cpiVal = UTILS.parseNumber(row.data[columnMap.cpi]) || 0;
      const limitVal = columnMap.limit !== -1 ? UTILS.parseNumber(row.data[columnMap.limit]) : null;
      const isAutomated = columnMap.isAutomated !== -1 ? 
        String(row.data[columnMap.isAutomated]).trim().toUpperCase() === 'TRUE' : false;
      
      if (!isAutomated) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
        if (limitVal !== null && !isNaN(limitVal) && cpiVal > limitVal) {
          colors[arrayIndex] = [blueColor];
          weights[arrayIndex] = ['bold'];
          cpiLimitCount++;
        }
      } else {
        automatedSkipped++;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ eROAS
      if (columnMap.eroas !== -1) {
        const eroasVal = UTILS.parseNumber(row.data[columnMap.eroas]);
        if (eroasVal !== null && eroasVal < 80) {
          eroasColors[arrayIndex] = [redColor];
          eroasWeights[arrayIndex] = ['bold'];
          eroasLowCount++;
        }
      }
      
    } catch (e) {
      UTILS.log(`‚ö†Ô∏è CPI: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${row.index + 1}: ${e.message}`);
    }
  });
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const cpiRange = sheet.getRange(2, columnMap.cpi + 1, data.length - 1);
  cpiRange.setFontColors(colors);
  cpiRange.setFontWeights(weights);
  
  UTILS.log(`üé® CPI: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CPI –¥–ª—è ${data.length - 1} —Å—Ç—Ä–æ–∫`);
  
  if (columnMap.eroas !== -1) {
    const eroasRange = sheet.getRange(2, columnMap.eroas + 1, data.length - 1);
    eroasRange.setFontColors(eroasColors);
    eroasRange.setFontWeights(eroasWeights);
    UTILS.log(`üé® CPI: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ eROAS –¥–ª—è ${data.length - 1} —Å—Ç—Ä–æ–∫`);
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = [];
  if (cpiLimitCount > 0) stats.push(`CPI –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç: ${cpiLimitCount}`);
  if (eroasLowCount > 0) stats.push(`eROAS –Ω–∏–∑–∫–∏–π: ${eroasLowCount}`);
  if (automatedSkipped > 0) stats.push(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${automatedSkipped}`);
  
  UTILS.log(`üìä CPI: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - ${stats.join(', ')}`);
  UTILS.log('‚úÖ CPI: checkHighCPI –∑–∞–≤–µ—Ä—à–µ–Ω');
}

function runMaxCPICalculation() {
  UTILS.log('üßÆ CPI: –ù–∞—á–∏–Ω–∞–µ–º runMaxCPICalculation');
  
  const sheet = UTILS.getSheet('Bundle Grouped Campaigns', UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) {
    UTILS.log('‚ùå CPI: –õ–∏—Å—Ç Bundle Grouped Campaigns –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  UTILS.log(`üìä CPI: –ù–∞–π–¥–µ–Ω–æ ${data.length - 1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞`);
  
  const eARPU365ColumnIndex = UTILS.findColumnIndex(headers, ['earpu 365']);
  const limitCPIColumnIndex = UTILS.findColumnIndex(headers, ['limit —Åpi', 'limit cpi']);
  
  if (eARPU365ColumnIndex === -1 || limitCPIColumnIndex === -1) {
    UTILS.log(`‚ùå CPI: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ - eARPU365: ${eARPU365ColumnIndex}, Limit CPI: ${limitCPIColumnIndex}`);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏');
  }
  
  UTILS.log(`üîç CPI: –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ - eARPU365: ${eARPU365ColumnIndex}, Limit CPI: ${limitCPIColumnIndex}`);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  const validRows = UTILS.getValidRows(sheet);
  UTILS.log(`üìä CPI: –ù–∞–π–¥–µ–Ω–æ ${validRows.length} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞`);
  
  const updates = [];
  let calculatedCount = 0, emptyCount = 0, zeroCount = 0;
  
  validRows.forEach(row => {
    const eARPU365 = UTILS.parseNumber(row.data[eARPU365ColumnIndex]);
    let limitCPI = '';
    
    if (eARPU365 !== null && eARPU365 !== 0) {
      limitCPI = Number((eARPU365 / 1.6).toFixed(2));
      calculatedCount++;
    } else if (eARPU365 === 0) {
      zeroCount++;
    } else {
      emptyCount++;
    }
    
    updates.push({
      row: row.index + 1,
      col: limitCPIColumnIndex + 1,
      value: limitCPI
    });
  });
  
  UTILS.log(`üßÆ CPI: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ - –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ: ${calculatedCount}, –ù—É–ª–µ–≤—ã–µ: ${zeroCount}, –ü—É—Å—Ç—ã–µ: ${emptyCount}`);
  
  if (updates.length > 0) {
    UTILS.batchUpdate(sheet, updates);
    UTILS.log(`‚úÖ CPI: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ ${updates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
  }
  
  UTILS.log('‚úÖ CPI: runMaxCPICalculation –∑–∞–≤–µ—Ä—à–µ–Ω');
}