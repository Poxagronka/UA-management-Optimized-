// 11_CPIManager.gs - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ CPI —Å –ø–æ–ª–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
function checkHighCPI() {
  UTILS.log('üîç CPI: –ù–∞—á–∏–Ω–∞–µ–º checkHighCPI');
  
  const sheet = UTILS.getSheet('Bundle Grouped Campaigns', UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) {
    UTILS.log('‚ùå CPI: –õ–∏—Å—Ç Bundle Grouped Campaigns –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  UTILS.log(`üìä CPI: –ù–∞–π–¥–µ–Ω–æ ${data.length - 1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
  
  const columnMap = {
    cpi: UTILS.findColumnIndex(headers, ['today cpi', 'cpi today']),
    limit: UTILS.findColumnIndex(headers, ['limit cpi', 'cpi limit', 'limit —Åpi']),
    eroas: UTILS.findColumnIndex(headers, ['eroas d365']),
    eroas730: UTILS.findColumnIndex(headers, ['eroas d730']),
    isAutomated: UTILS.findColumnIndex(headers, ['is automated', 'automated'])
  };
  
  const foundColumns = Object.entries(columnMap).filter(([key, idx]) => idx !== -1);
  UTILS.log(`üîç CPI: –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: ${foundColumns.map(([key, idx]) => `${key}:${idx}`).join(', ')}`);
  
  if (columnMap.cpi === -1) {
    UTILS.log('‚ùå CPI: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ CPI');
    return;
  }

  const validRows = UTILS.getValidRows(sheet);
  UTILS.log(`üìä CPI: –ù–∞–π–¥–µ–Ω–æ ${validRows.length} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
  
  const colors = [], weights = [], eroasColors = [], eroasWeights = [];
  const blackColor = '#000000', blueColor = '#4169E1', redColor = '#EF5350', greenColor = '#4CAF50';
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
  for (let i = 0; i < data.length - 1; i++) {
    colors.push([blackColor]);
    weights.push(['normal']);
    if (columnMap.eroas !== -1) {
      eroasColors.push([blackColor]);
      eroasWeights.push(['normal']);
    }
  }
  
  let cpiLimitCount = 0, eroasLowCount = 0, eroasTargetCount = 0, automatedSkipped = 0;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫
  validRows.forEach(row => {
    const arrayIndex = row.index - 1; // –ò–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
    
    try {
      const cpiVal = UTILS.parseNumber(row.data[columnMap.cpi]) || 0;
      const limitVal = columnMap.limit !== -1 ? UTILS.parseNumber(row.data[columnMap.limit]) : null;
      const isAutomated = columnMap.isAutomated !== -1 ? 
        String(row.data[columnMap.isAutomated]).trim().toUpperCase() === 'TRUE' : false;
      
      if (!isAutomated) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
        if (limitVal !== null && !isNaN(limitVal) && cpiVal > limitVal) {
          colors[arrayIndex] = [blueColor];
          weights[arrayIndex] = ['bold'];
          cpiLimitCount++;
        }
      } else {
        automatedSkipped++;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ eROAS d365
      if (columnMap.eroas !== -1) {
        const eroasVal = UTILS.parseNumber(row.data[columnMap.eroas]);
        if (eroasVal !== null && eroasVal < 80) {
          eroasColors[arrayIndex] = [redColor];
          eroasWeights[arrayIndex] = ['bold'];
          eroasLowCount++;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ eROAS d730 (—Ü–µ–ª—å > 250%)
      if (columnMap.eroas730 !== -1) {
        const eroas730Val = UTILS.parseNumber(row.data[columnMap.eroas730]);
        if (eroas730Val !== null) {
          if (eroas730Val >= 250) {
            // –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ - –ù–ï –≤—ã–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–º, —Ç–æ–ª—å–∫–æ —Å—á–∏—Ç–∞–µ–º
            eroasTargetCount++;
          } else if (eroas730Val < 150) {
            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π - –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
            eroasColors[arrayIndex] = [redColor];
            eroasWeights[arrayIndex] = ['bold'];
            eroasLowCount++;
          }
        }
      }
      
    } catch (e) {
      UTILS.log(`‚ö†Ô∏è CPI: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${row.index + 1}: ${e.message}`);
    }
  });
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const cpiRange = sheet.getRange(2, columnMap.cpi + 1, data.length - 1);
  cpiRange.setFontColors(colors);
  cpiRange.setFontWeights(weights);
  
  UTILS.log(`üé® CPI: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CPI –¥–ª—è ${data.length - 1} —Å—Ç—Ä–æ–∫`);
  
  if (columnMap.eroas !== -1 || columnMap.eroas730 !== -1) {
    const eroasRange = sheet.getRange(2, (columnMap.eroas730 !== -1 ? columnMap.eroas730 : columnMap.eroas) + 1, data.length - 1);
    eroasRange.setFontColors(eroasColors);
    eroasRange.setFontWeights(eroasWeights);
    UTILS.log(`üé® CPI: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ eROAS –¥–ª—è ${data.length - 1} —Å—Ç—Ä–æ–∫`);
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = [];
  if (cpiLimitCount > 0) stats.push(`CPI –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç: ${cpiLimitCount}`);
  if (eroasTargetCount > 0) stats.push(`eROAS d730 >= 250%: ${eroasTargetCount}`);
  if (eroasLowCount > 0) stats.push(`eROAS –Ω–∏–∑–∫–∏–π: ${eroasLowCount}`);
  if (automatedSkipped > 0) stats.push(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${automatedSkipped}`);
  
  UTILS.log(`üìä CPI: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - ${stats.join(', ')}`);
  UTILS.log('‚úÖ CPI: checkHighCPI –∑–∞–≤–µ—Ä—à–µ–Ω');
}

function runMaxCPICalculation() {
  UTILS.log('üßÆ CPI: –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π runMaxCPICalculation');
  
  const sheet = UTILS.getSheet('Bundle Grouped Campaigns', UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) {
    UTILS.log('‚ùå CPI: –õ–∏—Å—Ç Bundle Grouped Campaigns –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  updateEROASData();
  
  const hiddenSheet = UTILS.getSheet('AppodealStatsHidden', UTILS.CONFIG.SPREADSHEET_ID);
  if (!hiddenSheet) {
    UTILS.log('‚ùå CPI: –õ–∏—Å—Ç AppodealStatsHidden –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç');
    return;
  }
  
  const data = sheet.getDataRange().getValues();
  const hiddenData = hiddenSheet.getDataRange().getValues();
  const headers = data[0];
  const hiddenHeaders = hiddenData[0];
  
  UTILS.log(`üìä CPI: –ù–∞–π–¥–µ–Ω–æ ${data.length - 1} —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞`);
  
  const columnMap = {
    campaignId: UTILS.findColumnIndex(headers, ['campaign id/link']),
    limitCPI: UTILS.findColumnIndex(headers, ['limit —Åpi', 'limit cpi'])
  };
  
  const hiddenColumnMap = {
    campaignId: UTILS.findColumnIndex(hiddenHeaders, ['Campaign ID']),
    ret1: UTILS.findColumnIndex(hiddenHeaders, ['Retention D1']),
    ret7: UTILS.findColumnIndex(hiddenHeaders, ['Retention D7']),
    ret30: UTILS.findColumnIndex(hiddenHeaders, ['Retention D30']),
    roas1: UTILS.findColumnIndex(hiddenHeaders, ['ROAS D1']),
    roas7: UTILS.findColumnIndex(hiddenHeaders, ['ROAS D7']),
    arpu365: UTILS.findColumnIndex(hiddenHeaders, ['eARPU 365']),
    arpu730: UTILS.findColumnIndex(hiddenHeaders, ['eARPU 730']),
    cumulativeArpu730: UTILS.findColumnIndex(hiddenHeaders, ['Cumulative ARPU 730']),
    eroas365: UTILS.findColumnIndex(hiddenHeaders, ['eROAS 365']),
    eroas730: UTILS.findColumnIndex(hiddenHeaders, ['eROAS 730'])
  };
  
  if (columnMap.limitCPI === -1 || hiddenColumnMap.campaignId === -1) {
    UTILS.log(`‚ùå CPI: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞`);
    return;
  }
  
  UTILS.log(`üîç CPI: –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞`);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ lookup —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å–∫—Ä—ã—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫
  const metricsLookup = {};
  for (let i = 1; i < hiddenData.length; i++) {
    const campaignId = hiddenData[i][hiddenColumnMap.campaignId];
    if (campaignId) {
      metricsLookup[campaignId] = {
        ret1: UTILS.parseNumber(hiddenData[i][hiddenColumnMap.ret1]) || 0,
        ret7: UTILS.parseNumber(hiddenData[i][hiddenColumnMap.ret7]) || 0,
        ret30: UTILS.parseNumber(hiddenData[i][hiddenColumnMap.ret30]) || 0,
        roas1: UTILS.parseNumber(hiddenData[i][hiddenColumnMap.roas1]) || 0,
        roas7: UTILS.parseNumber(hiddenData[i][hiddenColumnMap.roas7]) || 0,
        arpu365: UTILS.parseNumber(hiddenData[i][hiddenColumnMap.arpu365]) || 0,
        arpu730: UTILS.parseNumber(hiddenData[i][hiddenColumnMap.arpu730]) || 0,
        cumulativeArpu730: UTILS.parseNumber(hiddenData[i][hiddenColumnMap.cumulativeArpu730]) || 0,
        eroas365: UTILS.parseNumber(hiddenData[i][hiddenColumnMap.eroas365]) || 0,
        eroas730: UTILS.parseNumber(hiddenData[i][hiddenColumnMap.eroas730]) || 0
      };
    }
  }
  
  UTILS.log(`üóÇÔ∏è CPI: –°–æ–∑–¥–∞–Ω–∞ lookup —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è ${Object.keys(metricsLookup).length} –∫–∞–º–ø–∞–Ω–∏–π`);
  
  const validRows = UTILS.getValidRows(sheet);
  const updates = [];
  let calculatedCount = 0, skipCount = 0;
  let minLimitCount = 0, maxLimitCount = 0;
  
  validRows.forEach(row => {
    const campaignId = UTILS.extractCampaignId(row.data[columnMap.campaignId]);
    if (!campaignId) {
      skipCount++;
      return;
    }
    
    const metrics = metricsLookup[campaignId];
    let limitCPI = '';
    
    if (metrics && (metrics.cumulativeArpu730 > 0 || metrics.arpu730 > 0 || metrics.arpu365 > 0)) {
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
      limitCPI = calculateOptimizedCPILimit(metrics);
      calculatedCount++;
      
      if (limitCPI === 0.3) minLimitCount++;
      if (limitCPI === 10) maxLimitCount++;
      
      UTILS.log(`üßÆ CPI: –ö–∞–º–ø–∞–Ω–∏—è ${campaignId} - –†–∞—Å—á–µ—Ç: ${limitCPI} (eROAS 730: ${metrics.eroas730}%, Ret D1: ${metrics.ret1}%, ARPU730: ${metrics.arpu730}, Cumulative: ${metrics.cumulativeArpu730})`);
    } else {
      skipCount++;
    }
    
    updates.push({
      row: row.index + 1,
      col: columnMap.limitCPI + 1,
      value: limitCPI
    });
  });
  
  UTILS.log(`üßÆ CPI: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ - –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ: ${calculatedCount}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipCount}, –ú–∏–Ω –ª–∏–º–∏—Ç (0.3): ${minLimitCount}, –ú–∞–∫—Å –ª–∏–º–∏—Ç (10): ${maxLimitCount}`);
  
  if (updates.length > 0) {
    UTILS.batchUpdate(sheet, updates);
    UTILS.log(`‚úÖ CPI: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ ${updates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
  }
  
  UTILS.log('‚úÖ CPI: runMaxCPICalculation –∑–∞–≤–µ—Ä—à–µ–Ω');
}

function calculateOptimizedCPILimit(metrics) {
  // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏
  
  // 1. –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ LTV –¥–∞–Ω–Ω—ã—Ö
  const ltv = metrics.cumulativeArpu730 > 0 ? metrics.cumulativeArpu730 : 
              (metrics.arpu730 > 0 ? metrics.arpu730 : metrics.arpu365);
  
  if (ltv <= 0) return '';
  
  // 2. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ü–µ–ª–µ–≤–æ–π ROAS –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  let targetROAS = 250; // –ë–∞–∑–æ–≤–∞—è —Ü–µ–ª—å
  
  if (metrics.eroas730 >= 500) {
    // –°—É–ø–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ü–µ–ª—å
    targetROAS = 200;
  } else if (metrics.eroas730 >= 300) {
    // –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    targetROAS = 220;
  } else if (metrics.eroas730 >= 200) {
    // –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    targetROAS = 240;
  } else if (metrics.eroas730 >= 150) {
    // –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    targetROAS = 250;
  } else if (metrics.eroas730 > 0) {
    // –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å
    targetROAS = 300;
  }
  
  // 3. –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
  let baseLimit = ltv / (targetROAS / 100);
  
  // 4. –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
  let qualityMultiplier = 1.0;
  
  // Retention –∫–∞—á–µ—Å—Ç–≤–æ (–≤–∞–∂–Ω–µ–π—à–∏–π —Ñ–∞–∫—Ç–æ—Ä)
  const retentionQuality = calculateRetentionQuality(metrics.ret1, metrics.ret7, metrics.ret30);
  qualityMultiplier *= retentionQuality;
  
  // –ë—ã—Å—Ç—Ä–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å (ROAS D1 –∏ D7)
  const earlyROASBonus = calculateEarlyROASBonus(metrics.roas1, metrics.roas7);
  qualityMultiplier *= earlyROASBonus;
  
  // 5. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
  let finalLimit = baseLimit * qualityMultiplier;
  
  // 6. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ)
  const minLimit = Math.max(0.3, ltv * 0.1); // –ù–µ –º–µ–Ω–µ–µ 10% –æ—Ç LTV
  const maxLimit = Math.min(10, ltv * 0.8);  // –ù–µ –±–æ–ª–µ–µ 80% –æ—Ç LTV
  
  finalLimit = Math.max(minLimit, Math.min(maxLimit, finalLimit));
  
  return Number(finalLimit.toFixed(2));
}

function calculateRetentionQuality(ret1, ret7, ret30) {
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ retention
  let score = 1.0;
  
  // Retention D1 (–≤–µ—Å 50%)
  if (ret1 >= 35) score *= 1.3;        // –û—Ç–ª–∏—á–Ω—ã–π
  else if (ret1 >= 25) score *= 1.15;  // –•–æ—Ä–æ—à–∏–π  
  else if (ret1 >= 15) score *= 1.0;   // –°—Ä–µ–¥–Ω–∏–π
  else if (ret1 >= 10) score *= 0.9;   // –ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
  else score *= 0.7;                   // –ü–ª–æ—Ö–æ–π
  
  // Retention D7 (–≤–µ—Å 30%)
  if (ret7 >= 20) score *= 1.2;
  else if (ret7 >= 12) score *= 1.1;
  else if (ret7 >= 8) score *= 1.0;
  else if (ret7 >= 5) score *= 0.95;
  else score *= 0.8;
  
  // Retention D30 (–≤–µ—Å 20%) - –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
  if (ret30 > 0) {
    if (ret30 >= 12) score *= 1.1;
    else if (ret30 >= 8) score *= 1.05;
    else if (ret30 >= 5) score *= 1.0;
    else score *= 0.9;
  }
  
  return Math.min(1.5, Math.max(0.5, score)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
}

function calculateEarlyROASBonus(roas1, roas7) {
  // –ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä—É—é –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å
  let bonus = 1.0;
  
  // ROAS D1
  if (roas1 >= 20) bonus *= 1.1;
  else if (roas1 >= 10) bonus *= 1.05;
  else if (roas1 >= 5) bonus *= 1.0;
  else bonus *= 0.95;
  
  // ROAS D7
  if (roas7 >= 50) bonus *= 1.15;
  else if (roas7 >= 30) bonus *= 1.1;
  else if (roas7 >= 20) bonus *= 1.05;
  else if (roas7 >= 10) bonus *= 1.0;
  else bonus *= 0.95;
  
  return Math.min(1.3, Math.max(0.8, bonus)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
}