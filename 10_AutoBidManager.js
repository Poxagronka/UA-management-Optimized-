// 10_AutoBidManager.gs - –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞–≤–æ–∫
function toggleCampaignAutoBids() {
  UTILS.log('üîÑ AutoBid: –ù–∞—á–∏–Ω–∞–µ–º toggleCampaignAutoBids');
  
  const sheet = UTILS.getSheet('Bundle Grouped Campaigns', UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) {
    UTILS.log('‚ùå AutoBid: –õ–∏—Å—Ç Bundle Grouped Campaigns –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  UTILS.log(`üìä AutoBid: –ù–∞–π–¥–µ–Ω–æ ${data.length - 1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
  
  const internalIdColIndex = UTILS.findColumnIndex(headers, ['internal id']);
  const isAutomatedColIndex = UTILS.findColumnIndex(headers, ['is automated']);
  
  if (internalIdColIndex === -1 || isAutomatedColIndex === -1) {
    UTILS.log(`‚ùå AutoBid: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ - Internal ID: ${internalIdColIndex}, Is Automated: ${isAutomatedColIndex}`);
    return;
  }
  
  UTILS.log(`‚úÖ AutoBid: –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ - Internal ID: ${internalIdColIndex}, Is Automated: ${isAutomatedColIndex}`);
  
  const rowsToProcess = [];
  let cachedCount = 0;
  let emptyIdCount = 0;
  
  // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  for (let i = 1; i < data.length; i++) {
    const internalId = data[i][internalIdColIndex]?.toString().trim();
    if (!internalId) {
      emptyIdCount++;
      continue;
    }
    
    const isAutomated = data[i][isAutomatedColIndex]?.toString().toUpperCase() === "TRUE";
    const cacheKey = `appodeal_campaign_${internalId}`;
    const cachedValue = UTILS.cache.get(cacheKey);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
    if (cachedValue !== null && cachedValue === isAutomated.toString()) {
      cachedCount++;
      continue;
    }
    
    rowsToProcess.push({
      rowIndex: i + 1,
      internalId,
      isAutomated,
      cacheKey
    });
  }
  
  UTILS.log(`üìà AutoBid: –ü—É—Å—Ç—ã—Ö ID: ${emptyIdCount}, –í –∫–µ—à–µ: ${cachedCount}, –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${rowsToProcess.length}`);
  
  if (rowsToProcess.length === 0) {
    UTILS.log('‚úÖ AutoBid: –ù–µ—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –≤—Å–µ –≤ –∫–µ—à–µ');
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞–º–∏
  const batchSize = 10;
  const totalBatches = Math.ceil(rowsToProcess.length / batchSize);
  UTILS.log(`üöÄ AutoBid: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${totalBatches} –±–∞—Ç—á–µ–π –ø–æ ${batchSize} –∑–∞–ø—Ä–æ—Å–æ–≤`);
  
  for (let i = 0; i < rowsToProcess.length; i += batchSize) {
    const batch = rowsToProcess.slice(i, i + batchSize);
    const batchNum = Math.floor(i / batchSize) + 1;
    UTILS.log(`‚ö° AutoBid: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${batchNum}/${totalBatches} (${batch.length} –∑–∞–ø—Ä–æ—Å–æ–≤)`);
    
    processBatch(batch);
    
    UTILS.log(`‚úÖ AutoBid: –ë–∞—Ç—á ${batchNum} –∑–∞–≤–µ—Ä—à–µ–Ω`);
    
    if (i + batchSize < rowsToProcess.length) {
      Utilities.sleep(100);
    }
  }
  
  UTILS.log('üéâ AutoBid: toggleCampaignAutoBids –∑–∞–≤–µ—Ä—à–µ–Ω');
}

function processBatch(batch) {
  UTILS.log(`üîß AutoBid: –ù–∞—á–∏–Ω–∞–µ–º processBatch –¥–ª—è ${batch.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
  
  const cacheUpdates = {};
  let successCount = 0;
  let errorCount = 0;
  
  batch.forEach((item, index) => {
    UTILS.log(`üì§ AutoBid: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å ${index + 1}/${batch.length} –¥–ª—è ID ${item.internalId} (enable: ${item.isAutomated})`);
    
    const response = sendToggleRequest(item.internalId, item.isAutomated);
    if (!response.error) {
      cacheUpdates[item.cacheKey] = item.isAutomated.toString();
      successCount++;
      UTILS.log(`‚úÖ AutoBid: –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω ID ${item.internalId}`);
    } else {
      errorCount++;
      UTILS.log(`‚ùå AutoBid: –û—à–∏–±–∫–∞ –¥–ª—è ID ${item.internalId}: ${response.error}`);
    }
  });
  
  if (Object.keys(cacheUpdates).length > 0) {
    UTILS.cache.putAll(cacheUpdates);
    UTILS.log(`üíæ AutoBid: –û–±–Ω–æ–≤–ª–µ–Ω –∫–µ—à –¥–ª—è ${Object.keys(cacheUpdates).length} –∫–∞–º–ø–∞–Ω–∏–π`);
  }
  
  UTILS.log(`üìä AutoBid: –ë–∞—Ç—á —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
}

function sendToggleRequest(campaignId, enable) {
  UTILS.log(`üåê AutoBid: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GraphQL –∑–∞–ø—Ä–æ—Å –¥–ª—è ID ${campaignId}`);
  
  const payload = [{
    operationName: "toggleCampaignAutoBid",
    variables: {
      enable: enable,
      ids: [campaignId],
      meta: {
        isAbsoluteChange: true,
        isMassAction: false
      }
    },
    query: `mutation toggleCampaignAutoBid($enable: Boolean!, $ids: [ID!]!, $meta: CPAMetaData!) {
      bidManager {
        ua {
          toggleCampaignAutoBid(enable: $enable, ids: $ids, meta: $meta) {
            id
            isBeingUpdated
            isAutomated
            __typename
          }
          __typename
        }
        __typename
      }
    }`
  }];
  
  const result = UTILS.fetchWithRetry(UTILS.CONFIG.BASE_URL_APPODEAL, {
    method: "post",
    headers: {
      "Authorization": `Bearer ${UTILS.CONFIG.API_TOKEN_APPODEAL}`,
      "Content-Type": "application/json"
    },
    payload: JSON.stringify(payload)
  });
  
  if (result.success) {
    UTILS.log(`‚úÖ AutoBid: –ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è ID ${campaignId}`);
    try {
      const parsed = JSON.parse(result.response.getContentText());
      if (parsed.errors) {
        UTILS.log(`‚ö†Ô∏è AutoBid: GraphQL –æ—à–∏–±–∫–∏ –¥–ª—è ID ${campaignId}: ${JSON.stringify(parsed.errors)}`);
        return { error: 'GraphQL errors: ' + JSON.stringify(parsed.errors) };
      }
      return parsed;
    } catch (error) {
      UTILS.log(`‚ùå AutoBid: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è ID ${campaignId}: ${error.message}`);
      return { error: error.toString() };
    }
  } else {
    UTILS.log(`‚ùå AutoBid: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è ID ${campaignId}: ${result.error}`);
    return { error: result.error || 'Request failed' };
  }
}

function clearAutoBidCache() {
  const cacheKey = "appodeal_campaign_all";
  UTILS.cache.remove(cacheKey);
  UTILS.log('üóëÔ∏è AutoBid: –ö–µ—à –æ—á–∏—â–µ–Ω');
}