// 09_IDManager.gs - –ú–µ–Ω–µ–¥–∂–µ—Ä Campaign ID mappings
function updateCampaignIdMappings() {
  UTILS.log('üÜî IDManager: –ù–∞—á–∏–Ω–∞–µ–º updateCampaignIdMappings');
  
  const spreadsheetData = getSpreadsheetCampaignData();
  if (!spreadsheetData) {
    UTILS.log('‚ùå IDManager: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã');
    return false;
  }
  
  const { sheet, data, campaignIdColIndex, internalIdColIndex } = spreadsheetData;
  if (internalIdColIndex === -1) {
    UTILS.log('‚ùå IDManager: –ö–æ–ª–æ–Ω–∫–∞ Internal ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return false;
  }
  
  UTILS.log(`üìä IDManager: –ù–∞–π–¥–µ–Ω–æ ${data.length - 1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö, –∫–æ–ª–æ–Ω–∫–∞ Internal ID: ${internalIdColIndex}`);
  
  const campaignIds = {};
  const cacheKeys = [];
  const currentInternalIds = {};
  let validCampaignCount = 0;
  
  // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
  for (let i = 1; i < data.length; i++) {
    const campaignId = UTILS.extractCampaignId(data[i][campaignIdColIndex]);
    if (!campaignId) continue;
    
    campaignIds[campaignId] = i;
    const internalId = data[i][internalIdColIndex];
    if (internalId) currentInternalIds[campaignId] = internalId;
    
    cacheKeys.push(getCampaignCacheKey(campaignId));
    validCampaignCount++;
  }
  
  UTILS.log(`üîç IDManager: –ù–∞–π–¥–µ–Ω–æ ${validCampaignCount} –≤–∞–ª–∏–¥–Ω—ã—Ö Campaign ID`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
  const fullRefreshNeeded = needsFullRefresh();
  let campaignsToUpdate = Object.keys(campaignIds);
  
  UTILS.log(`üóÉÔ∏è IDManager: –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${fullRefreshNeeded ? '—Ç—Ä–µ–±—É–µ—Ç—Å—è' : '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}`);
  
  if (!fullRefreshNeeded) {
    const cachedMappings = UTILS.cache.getAll(cacheKeys);
    campaignsToUpdate = Object.keys(campaignIds).filter(campaignId => {
      const cacheKey = getCampaignCacheKey(campaignId);
      if (!cachedMappings[cacheKey]) return true;
      
      const cachedInternalId = cachedMappings[cacheKey];
      return !currentInternalIds[campaignId] || 
             currentInternalIds[campaignId].toString() !== cachedInternalId;
    });
    
    const cachedCount = Object.keys(campaignIds).length - campaignsToUpdate.length;
    UTILS.log(`üíæ IDManager: –í –∫–µ—à–µ –Ω–∞–π–¥–µ–Ω–æ ${cachedCount} mappings, –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é: ${campaignsToUpdate.length}`);
  }
  
  if (campaignsToUpdate.length === 0) {
    UTILS.log('‚úÖ IDManager: –í—Å–µ mappings –∞–∫—Ç—É–∞–ª—å–Ω—ã');
    return true;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ GraphQL
  UTILS.log(`üåê IDManager: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º mappings —á–µ—Ä–µ–∑ GraphQL –¥–ª—è ${campaignsToUpdate.length} –∫–∞–º–ø–∞–Ω–∏–π`);
  const mappings = fetchCampaignMappings();
  if (!mappings) {
    UTILS.log('‚ùå IDManager: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å mappings —á–µ—Ä–µ–∑ GraphQL');
    return false;
  }
  
  UTILS.log(`üì¶ IDManager: –ü–æ–ª—É—á–µ–Ω–æ ${Object.keys(mappings).length} mappings –∏–∑ GraphQL`);
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const updates = [];
  const cacheUpdates = {};
  let updatedCount = 0;
  
  Object.entries(mappings).forEach(([campaignId, internalId]) => {
    if (!campaignIds.hasOwnProperty(campaignId)) return;
    
    const rowIndex = campaignIds[campaignId];
    const currentInternalId = data[rowIndex][internalIdColIndex];
    
    if (currentInternalId !== internalId) {
      updates.push({
        row: rowIndex + 1,
        col: internalIdColIndex + 1,
        value: internalId
      });
      updatedCount++;
    }
    
    const cacheKey = getCampaignCacheKey(campaignId);
    cacheUpdates[cacheKey] = internalId.toString();
  });
  
  UTILS.log(`üìù IDManager: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${updates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã`);
  
  if (updates.length > 0) {
    UTILS.batchUpdate(sheet, updates);
    UTILS.log(`‚úÖ IDManager: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ ${updates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ`);
  }
  
  if (Object.keys(cacheUpdates).length > 0) {
    UTILS.cache.putAll(cacheUpdates);
    UTILS.cache.put("campaign_mapping_last_update", Date.now().toString());
    UTILS.log(`üíæ IDManager: –û–±–Ω–æ–≤–ª–µ–Ω –∫–µ—à –¥–ª—è ${Object.keys(cacheUpdates).length} mappings`);
  }
  
  UTILS.log('‚úÖ IDManager: updateCampaignIdMappings –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  return true;
}

function getSpreadsheetCampaignData() {
  UTILS.log('üìä IDManager: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ Bundle Grouped Campaigns');
  
  const sheet = UTILS.getSheet('Bundle Grouped Campaigns', UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) {
    UTILS.log('‚ùå IDManager: –õ–∏—Å—Ç Bundle Grouped Campaigns –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
  }
  
  const data = sheet.getDataRange().getValues();
  if (data.length <= 1) {
    UTILS.log('‚ùå IDManager: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ');
    return null;
  }
  
  const headers = data[0];
  const campaignIdColIndex = UTILS.findColumnIndex(headers, ['campaign id', 'campaign id/link']);
  const internalIdColIndex = UTILS.findColumnIndex(headers, ['internal id']);
  
  UTILS.log(`üîç IDManager: –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ - Campaign ID: ${campaignIdColIndex}, Internal ID: ${internalIdColIndex}`);
  
  if (campaignIdColIndex === -1) {
    UTILS.log('‚ùå IDManager: –ö–æ–ª–æ–Ω–∫–∞ Campaign ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return null;
  }
  
  return { sheet, data, campaignIdColIndex, internalIdColIndex };
}

function getCampaignCacheKey(campaignId) {
  return `campaign_mapping_${campaignId}`;
}

function needsFullRefresh() {
  const lastUpdate = UTILS.cache.get("campaign_mapping_last_update");
  if (!lastUpdate) {
    UTILS.log('üïê IDManager: –ü–µ—Ä–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    return true;  
  }
  
  const lastUpdateDate = new Date(parseInt(lastUpdate));
  const hoursSinceLastUpdate = (Date.now() - lastUpdateDate) / (1000 * 60 * 60);
  const needsRefresh = hoursSinceLastUpdate > 24;
  
  UTILS.log(`üïê IDManager: –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${hoursSinceLastUpdate.toFixed(1)} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${needsRefresh ? '—Ç—Ä–µ–±—É–µ—Ç—Å—è' : '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}`);
  return needsRefresh;
}

function fetchCampaignMappings() {
  UTILS.log('üåê IDManager: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º campaign mappings —á–µ—Ä–µ–∑ GraphQL');
  
  const dateRange = UTILS.getDateRange(10);
  UTILS.log(`üìÖ IDManager: –ü–µ—Ä–∏–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ - —Å ${dateRange.from} –ø–æ ${dateRange.to}`);
  
  const payload = {
    operationName: "RichStats",
    variables: {
      dateFilters: [{
        dimension: "INSTALL_DATE",
        from: dateRange.from,
        to: dateRange.to,
        include: true
      }],
      filters: [
        {
          dimension: "USER",
          values: ["79950", "127168", "157350", "150140", "11628", "233863", "239157"],
          include: true
        },
        { dimension: "ATTRIBUTION_PARTNER", values: ["Stack"], include: true },
        { dimension: "ATTRIBUTION_NETWORK_HID", values: ["234187180623265792"], include: true }
      ],
      groupBy: [{ dimension: "ATTRIBUTION_CAMPAIGN_HID" }],
      measures: [{ id: "installs", day: null }],
      havingFilters: [],
      anonymizationMode: "OFF",
      topFilter: null,
      revenuePredictionVersion: "",
      isMultiMediation: true
    },
    query: `query RichStats($dateFilters: [DateFilterInput!]!, $filters: [FilterInput!]!, $groupBy: [GroupByInput!]!, $measures: [RichMeasureInput!]!, $havingFilters: [HavingFilterInput!], $anonymizationMode: DataAnonymizationMode, $revenuePredictionVersion: String!, $topFilter: TopFilterInput, $funnelFilter: FunnelAttributes, $isMultiMediation: Boolean) {
      analytics(anonymizationMode: $anonymizationMode) {
        richStats(funnelFilter: $funnelFilter dateFilters: $dateFilters filters: $filters groupBy: $groupBy measures: $measures havingFilters: $havingFilters revenuePredictionVersion: $revenuePredictionVersion topFilter: $topFilter isMultiMediation: $isMultiMediation) {
          stats { id ... on UaCampaign { hid campaignId __typename } __typename }
          __typename
        }
        __typename
      }
    }`
  };
  
  const result = UTILS.fetchWithRetry(UTILS.CONFIG.BASE_URL_APPODEAL, {
    method: "post",
    headers: {
      "Authorization": `Bearer ${UTILS.CONFIG.API_TOKEN_APPODEAL}`,
      "Content-Type": "application/json"
    },
    payload: JSON.stringify(payload)
  });
  
  if (!result.success) {
    UTILS.log(`‚ùå IDManager: –û—à–∏–±–∫–∞ GraphQL –∑–∞–ø—Ä–æ—Å–∞: ${result.error}`);
    return null;
  }
  
  UTILS.log('üì° IDManager: GraphQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  
  try {
    const jsonResponse = JSON.parse(result.response.getContentText());
    if (jsonResponse.errors) {
      UTILS.log(`‚ùå IDManager: GraphQL –æ—à–∏–±–∫–∏: ${JSON.stringify(jsonResponse.errors)}`);
      return null;
    }
    
    const mappings = {};
    const statsGroups = jsonResponse.data?.analytics?.richStats?.stats;
    
    if (Array.isArray(statsGroups)) {
      statsGroups.forEach(group => {
        if (Array.isArray(group) && group[0]) {
          const campaignObj = group[0];
          const { id, campaignId } = campaignObj;
          if (id && campaignId) {
            mappings[campaignId] = id;
          }
        }
      });
      
      UTILS.log(`üéØ IDManager: –ò–∑–≤–ª–µ—á–µ–Ω–æ ${Object.keys(mappings).length} mappings –∏–∑ –æ—Ç–≤–µ—Ç–∞ GraphQL`);
    } else {
      UTILS.log('‚ö†Ô∏è IDManager: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ GraphQL');
    }
    
    return mappings;
    
  } catch (error) {
    UTILS.log(`‚ùå IDManager: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ GraphQL: ${error.message}`);
    return null;
  }
}

// Wrapper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function idlog() {
  UTILS.log('üîÑ IDManager: –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ idlog() wrapper');
  updateCampaignIdMappings();
}