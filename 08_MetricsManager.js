// 08_MetricsManager.gs - –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –º–µ—Ç—Ä–∏–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
function updateEROASData() {
  UTILS.log('üìä Metrics: –ù–∞—á–∏–Ω–∞–µ–º updateEROASData —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏');
  
  const dateRange = UTILS.getDateRange(29); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const endDate = new Date();
  endDate.setDate(endDate.getDate() - 2);
  const adjustedRange = {
    from: UTILS.formatDate(new Date(endDate.getTime() - 29 * 24 * 60 * 60 * 1000)),
    to: UTILS.formatDate(endDate)
  };
  
  UTILS.log(`üìÖ Metrics: –ü–µ—Ä–∏–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ - —Å ${adjustedRange.from} –ø–æ ${adjustedRange.to}`);
  
  const payload = {
    operationName: "RichStats",
    variables: {
      dateFilters: [{
        dimension: "INSTALL_DATE",
        from: adjustedRange.from,
        to: adjustedRange.to,
        include: true
      }],
      filters: [
        {
          dimension: "USER",
          values: ["79950", "127168", "157350", "150140", "11628", "233863", "239157", "235837"],
          include: true
        },
        { dimension: "ATTRIBUTION_PARTNER", values: ["Stack"], include: true },
        { dimension: "ATTRIBUTION_NETWORK_HID", values: ["234187180623265792"], include: true },
        { dimension: "ATTRIBUTION_CAMPAIGN_HID", values: [], include: true, searchByString: "/tricky/i" }
      ],
      groupBy: [{ dimension: "ATTRIBUTION_CAMPAIGN_HID" }],
      measures: [
        // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        { id: "cpi", day: null },
        { id: "installs", day: null },
        { id: "spend", day: null },
        { id: "ipm", day: null },
        
        // Retention –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        { id: "retention_rate", day: 1 },
        { id: "retention_rate", day: 3 },
        { id: "retention_rate", day: 7 },
        { id: "retention_rate", day: 14 },
        { id: "retention_rate", day: 30 },
        { id: "retention_rate", day: 90 },
        { id: "retention_rate", day: 180 },
        { id: "retention_rate", day: 365 },
        
        // ROAS –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏
        { id: "roas", day: 1 },
        { id: "roas", day: 7 },
        
        // –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ LTV
        { id: "e_arpu_forecast", day: 365 },
        { id: "e_arpu_forecast", day: 730 },
        { id: "cumulative_arpu_forecast", day: 730 },
        { id: "e_roas_forecast", day: 365 },
        { id: "e_roas_forecast", day: 730 },
        { id: "e_profit_forecast", day: 730 },
        { id: "e_revenue_forecast", day: 730 }
      ],
      havingFilters: [],
      anonymizationMode: "OFF",
      topFilter: null,
      revenuePredictionVersion: "",
      isMultiMediation: true
    },
    query: `query RichStats($dateFilters: [DateFilterInput!]!, $filters: [FilterInput!]!, $groupBy: [GroupByInput!]!, $measures: [RichMeasureInput!]!, $havingFilters: [HavingFilterInput!], $anonymizationMode: DataAnonymizationMode, $revenuePredictionVersion: String!, $topFilter: TopFilterInput, $funnelFilter: FunnelAttributes, $isMultiMediation: Boolean) {
      analytics(anonymizationMode: $anonymizationMode) {
        richStats(funnelFilter: $funnelFilter dateFilters: $dateFilters filters: $filters groupBy: $groupBy measures: $measures havingFilters: $havingFilters revenuePredictionVersion: $revenuePredictionVersion topFilter: $topFilter isMultiMediation: $isMultiMediation) {
          stats { 
            id 
            ... on UaCampaign { 
              hid campaignId campaignName targetCpa recommendedTargetCpa createdAt updatedAt lastBidChangedAt isAutomated __typename 
            } 
            ... on StatsValue { 
              value __typename 
            } 
            ... on ForecastStatsItem { 
              value uncertainForecast __typename 
            }
            ... on RetentionStatsValue {
              value cohortSize __typename
            }
            __typename 
          }
          __typename
        }
        __typename
      }
    }`
  };

  const options = {
    method: 'post',
    headers: {
      'Authorization': `Bearer ${UTILS.CONFIG.API_TOKEN_APPODEAL}`,
      'Content-Type': 'application/json'
    },
    payload: JSON.stringify(payload)
  };

  UTILS.log('üåê Metrics: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π GraphQL –∑–∞–ø—Ä–æ—Å –∫ Appodeal API');

  try {
    const response = UrlFetchApp.fetch(UTILS.CONFIG.BASE_URL_APPODEAL, options);
    const statusCode = response.getResponseCode();
    
    UTILS.log(`üì° Metrics: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API - —Å—Ç–∞—Ç—É—Å: ${statusCode}`);
    
    if (statusCode !== 200) {
      UTILS.log(`‚ùå Metrics: –û—à–∏–±–∫–∞ API - —Å—Ç–∞—Ç—É—Å ${statusCode}`);
      return UTILS.handleError(new Error(`API returned ${statusCode}`), 'updateEROASData');
    }
    
    const jsonResponse = JSON.parse(response.getContentText());
    
    if (jsonResponse.errors) {
      UTILS.log(`‚ùå Metrics: GraphQL –æ—à–∏–±–∫–∏: ${JSON.stringify(jsonResponse.errors)}`);
      return UTILS.handleError(new Error('GraphQL errors'), 'updateEROASData');
    }
    
    const statsCount = jsonResponse?.data?.analytics?.richStats?.stats?.length || 0;
    UTILS.log(`üìä Metrics: –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${statsCount} –∫–∞–º–ø–∞–Ω–∏–π`);
    
    processCampaignStatsToSheet(jsonResponse);
    
    UTILS.log('‚úÖ Metrics: updateEROASData –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    return jsonResponse;
    
  } catch (error) {
    UTILS.log(`‚ùå Metrics: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`);
    return UTILS.handleError(error, 'updateEROASData');
  }
}

function processCampaignStatsToSheet(response) {
  UTILS.log('üìù Metrics: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π');
  
  const ss = SpreadsheetApp.openById(UTILS.CONFIG.SPREADSHEET_ID);
  
  let statsSheet = ss.getSheetByName('AppodealStatsHidden');
  if (!statsSheet) {
    UTILS.log('üìÑ Metrics: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç AppodealStatsHidden');
    statsSheet = ss.insertSheet('AppodealStatsHidden');
    statsSheet.hideSheet();
  } else {
    UTILS.log('üìÑ Metrics: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç AppodealStatsHidden');
  }
  
  statsSheet.clear();
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
  const headers = [
    'Campaign Name', 'Campaign ID', 'Target CPA', 'Recommended Target CPA',
    'Installs', 'CPI', 'Spend', 'IPM', 
    'Retention D1', 'Retention D3', 'Retention D7', 'Retention D14', 'Retention D30', 'Retention D90', 'Retention D180', 'Retention D365',
    'ROAS D1', 'ROAS D7',
    'eARPU 365', 'eARPU 730', 'Cumulative ARPU 730',
    'eROAS 365', 'eROAS 730', 'eProfit 730', 'eRevenue 730',
    'Created At', 'Last Updated', 'Last Bid Changed', 'Is Automated'
  ];
  
  const formatValue = (value, precision = 2) => {
    return value !== null && value !== undefined ? Number(value).toFixed(precision) : 'N/A';
  };
  
  const formatDate = (timestamp) => {
    return timestamp ? new Date(timestamp * 1000).toLocaleString() : 'N/A';
  };
  
  const dataToWrite = [headers];
  let processedCampaigns = 0;
  
  if (response?.data?.analytics?.richStats?.stats) {
    response.data.analytics.richStats.stats.forEach(campaignData => {
      const campaign = campaignData[0];
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
      const values = campaignData.slice(1);
      const [cpi, installs, spend, ipm, 
             ret1, ret3, ret7, ret14, ret30, ret90, ret180, ret365,
             roas1, roas7,
             arpu365, arpu730, cumulativeArpu730,
             eroas365, eroas730, profit730, revenue730] = values.map(item => formatValue(item.value));
      
      // –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (processedCampaigns === 0) {
        UTILS.log(`üîç Metrics: –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏:`);
        UTILS.log(`   - Campaign: ${campaign.campaignName}`);
        UTILS.log(`   - Retention D1: ${ret1}, D7: ${ret7}, D30: ${ret30}`);
        UTILS.log(`   - ROAS D1: ${roas1}, D7: ${roas7}`);
        UTILS.log(`   - eARPU 365: ${arpu365}, Cumulative ARPU 730: ${cumulativeArpu730}`);
      }

      dataToWrite.push([
        campaign.campaignName || 'N/A',
        campaign.campaignId || 'N/A',
        formatValue(campaign.targetCpa),
        formatValue(campaign.recommendedTargetCpa),
        installs, cpi, spend, ipm,
        ret1, ret3, ret7, ret14, ret30, ret90, ret180, ret365,
        roas1, roas7,
        arpu365, arpu730, cumulativeArpu730,
        eroas365, eroas730, profit730, revenue730,
        formatDate(campaign.createdAt),
        formatDate(campaign.updatedAt),
        formatDate(campaign.lastBidChangedAt),
        campaign.isAutomated !== undefined ? campaign.isAutomated : 'N/A'
      ]);
      processedCampaigns++;
    });
  }

  UTILS.log(`üìä Metrics: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${processedCampaigns} –∫–∞–º–ø–∞–Ω–∏–π`);

  if (dataToWrite.length > 1) {
    statsSheet.getRange(1, 1, dataToWrite.length, headers.length).setValues(dataToWrite);
    UTILS.log(`‚úÖ Metrics: –ó–∞–ø–∏—Å–∞–Ω–æ ${dataToWrite.length - 1} —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç AppodealStatsHidden`);
  } else {
    UTILS.log(`‚ö†Ô∏è Metrics: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏`);
  }
}

function updateBundleGroupedCampaigns() {
  UTILS.log('üîÑ Metrics: –ù–∞—á–∏–Ω–∞–µ–º updateBundleGroupedCampaigns');
  
  const spreadsheet = SpreadsheetApp.openById(UTILS.CONFIG.SPREADSHEET_ID);
  const hiddenStatsSheet = spreadsheet.getSheetByName('AppodealStatsHidden');
  const bundleGroupedSheet = spreadsheet.getSheetByName('Bundle Grouped Campaigns');
  
  if (!hiddenStatsSheet || !bundleGroupedSheet) {
    UTILS.log(`‚ùå Metrics: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–∏—Å—Ç—ã - Hidden: ${!!hiddenStatsSheet}, Bundle: ${!!bundleGroupedSheet}`);
    throw new Error('Required sheets not found');
  }
  
  const hiddenStatsData = hiddenStatsSheet.getDataRange().getValues();
  const bundleGroupedData = bundleGroupedSheet.getDataRange().getValues();
  
  UTILS.log(`üìä Metrics: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - Hidden: ${hiddenStatsData.length - 1} —Å—Ç—Ä–æ–∫, Bundle: ${bundleGroupedData.length - 1} —Å—Ç—Ä–æ–∫`);
  
  const hiddenHeaders = hiddenStatsData[0];
  const bundleHeaders = bundleGroupedData[0];
  
  const hiddenIdIdx = UTILS.findColumnIndex(hiddenHeaders, ['Campaign ID']);
  const bundleIdIdx = UTILS.findColumnIndex(bundleHeaders, ['Campaign ID/Link']);
  const bundleLocalIdx = UTILS.findColumnIndex(bundleHeaders, ['Local']);
  const hiddenAutoIdx = UTILS.findColumnIndex(hiddenHeaders, ['Is Automated']);
  const bundleAutoIdx = UTILS.findColumnIndex(bundleHeaders, ['Is Automated']);
  
  UTILS.log(`üîç Metrics: –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ - Hidden ID: ${hiddenIdIdx}, Bundle ID: ${bundleIdIdx}, Local: ${bundleLocalIdx}, Auto: ${hiddenAutoIdx}/${bundleAutoIdx}`);
  
  if ([hiddenIdIdx, bundleIdIdx, bundleLocalIdx, hiddenAutoIdx, bundleAutoIdx].some(idx => idx === -1)) {
    UTILS.log(`‚ùå Metrics: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏`);
    throw new Error('Required columns not found');
  }
  
  const columnsToUpdate = [
    { bundleIdx: UTILS.findColumnIndex(bundleHeaders, 'eARPU 365'), hiddenIdx: UTILS.findColumnIndex(hiddenHeaders, 'eARPU 365') },
    { bundleIdx: UTILS.findColumnIndex(bundleHeaders, 'IPM'), hiddenIdx: UTILS.findColumnIndex(hiddenHeaders, 'IPM') },
    { bundleIdx: UTILS.findColumnIndex(bundleHeaders, 'eROAS d365'), hiddenIdx: UTILS.findColumnIndex(hiddenHeaders, 'eROAS 365') },
    { bundleIdx: UTILS.findColumnIndex(bundleHeaders, ['eROAS d730', 'eroas d730']), hiddenIdx: UTILS.findColumnIndex(hiddenHeaders, ['eROAS 730']) },
    { bundleIdx: UTILS.findColumnIndex(bundleHeaders, 'eProfit d730'), hiddenIdx: UTILS.findColumnIndex(hiddenHeaders, 'eProfit 730'), divideBy: 10 },
    { bundleIdx: bundleAutoIdx, hiddenIdx: hiddenAutoIdx }
  ];
  
  const validColumns = columnsToUpdate.filter(col => col.bundleIdx !== -1 && col.hiddenIdx !== -1);
  UTILS.log(`üìã Metrics: –ù–∞–π–¥–µ–Ω–æ ${validColumns.length} –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ lookup —Ç–∞–±–ª–∏—Ü—ã
  const lookup = {};
  const nameIdx = UTILS.findColumnIndex(hiddenHeaders, 'Campaign Name');
  
  for (let i = 1; i < hiddenStatsData.length; i++) {
    const id = hiddenStatsData[i][hiddenIdIdx];
    const name = hiddenStatsData[i][nameIdx] || '';
    if (id) {
      lookup[id] = {
        row: hiddenStatsData[i],
        locale: UTILS.extractLocale(name)
      };
    }
  }
  
  UTILS.log(`üóÇÔ∏è Metrics: –°–æ–∑–¥–∞–Ω–∞ lookup —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è ${Object.keys(lookup).length} –∫–∞–º–ø–∞–Ω–∏–π`);
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –∫ –≤–∞–ª–∏–¥–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º
  const validRows = UTILS.getValidRows(bundleGroupedSheet);
  const updates = [];
  let matchedCount = 0;
  
  validRows.forEach(row => {
    const id = row.data[bundleIdIdx];
    if (lookup[id]) {
      validColumns.forEach(col => {
        let val = lookup[id].row[col.hiddenIdx];
        if (col.divideBy) val = val / col.divideBy;
        updates.push({ row: row.index + 1, col: col.bundleIdx + 1, value: val });
      });
      
      const loc = lookup[id].locale;
      if (loc) {
        updates.push({ row: row.index + 1, col: bundleLocalIdx + 1, value: loc });
      }
      matchedCount++;
    }
  });
  
  UTILS.log(`üéØ Metrics: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${matchedCount} –∫–∞–º–ø–∞–Ω–∏–π, –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${updates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
  
  if (updates.length > 0) {
    UTILS.batchUpdate(bundleGroupedSheet, updates);
    UTILS.log(`‚úÖ Metrics: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ ${updates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
  }
  
  UTILS.log('‚úÖ Metrics: updateBundleGroupedCampaigns –∑–∞–≤–µ—Ä—à–µ–Ω');
}

function groupMetrics() {
  UTILS.log('üìä Metrics: –ù–∞—á–∏–Ω–∞–µ–º groupMetrics');
  
  updateBundleGroupTotals();
  updateROASValuesOnly();
  
  UTILS.log('‚úÖ Metrics: groupMetrics –∑–∞–≤–µ—Ä—à–µ–Ω');
}

function updateBundleGroupTotals() {
  UTILS.log('üßÆ Metrics: –ù–∞—á–∏–Ω–∞–µ–º updateBundleGroupTotals');
  
  const sheet = UTILS.getSheet("Bundle Grouped Campaigns", UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) {
    UTILS.log('‚ùå Metrics: –õ–∏—Å—Ç Bundle Grouped Campaigns –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const data = sheet.getDataRange().getValues();
  const backgrounds = sheet.getRange(1, 1, sheet.getLastRow(), 1).getBackgrounds();
  const headers = data[0];
  
  const sourceIdx = UTILS.findColumnIndex(headers, 'Source');
  const eProfitIdx = UTILS.findColumnIndex(headers, 'eProfit d730');
  
  if (sourceIdx === -1 || eProfitIdx === -1) {
    UTILS.log(`‚ùå Metrics: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ - Source: ${sourceIdx}, eProfit: ${eProfitIdx}`);
    return;
  }
  
  UTILS.log(`üîç Metrics: –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ - Source: ${sourceIdx}, eProfit: ${eProfitIdx}`);
  
  // –ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—ã (—Å—Ç—Ä–æ–∫–∏ —Å –∑–µ–ª–µ–Ω—ã–º —Ñ–æ–Ω–æ–º #cbffdf) –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö
  const validRows = UTILS.getValidRows(sheet, { includeGroupHeaders: true });
  const updates = [];
  let processedGroups = 0;
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –≥—Ä—É–ø–ø
  let currentGroup = [];
  let currentGroupHeader = null;
  
  validRows.forEach(row => {
    if (row.isGroupHeader) {
      // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –µ—Å—Ç—å
      if (currentGroupHeader && currentGroup.length > 0) {
        let sum = 0, hasValidData = false;
        
        currentGroup.forEach(groupRow => {
          const value = UTILS.parseNumber(groupRow.data[eProfitIdx]);
          if (value !== null) {
            sum += value;
            hasValidData = true;
          }
        });
        
        if (hasValidData) {
          updates.push({ row: currentGroupHeader.index + 1, col: eProfitIdx + 1, value: sum.toFixed(2) });
          processedGroups++;
        }
      }
      
      // –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
      currentGroupHeader = row;
      currentGroup = [];
    } else if (currentGroupHeader) {
      currentGroup.push(row);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
  if (currentGroupHeader && currentGroup.length > 0) {
    let sum = 0, hasValidData = false;
    
    currentGroup.forEach(groupRow => {
      const value = UTILS.parseNumber(groupRow.data[eProfitIdx]);
      if (value !== null) {
        sum += value;
        hasValidData = true;
      }
    });
    
    if (hasValidData) {
      updates.push({ row: currentGroupHeader.index + 1, col: eProfitIdx + 1, value: sum.toFixed(2) });
      processedGroups++;
    }
  }
  
  UTILS.log(`üßÆ Metrics: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: ${processedGroups}, –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${updates.length}`);
  
  if (updates.length > 0) {
    UTILS.batchUpdate(sheet, updates);
  }
  
  UTILS.log('‚úÖ Metrics: updateBundleGroupTotals –∑–∞–≤–µ—Ä—à–µ–Ω');
}

function updateROASValuesOnly() {
  UTILS.log('üìà Metrics: –ù–∞—á–∏–Ω–∞–µ–º updateROASValuesOnly');
  
  const sheet = UTILS.getSheet("Bundle Grouped Campaigns", UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) {
    UTILS.log('‚ùå Metrics: –õ–∏—Å—Ç Bundle Grouped Campaigns –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  const roasIdx = UTILS.findColumnIndex(headers, 'eROAS d365');
  const roas730Idx = UTILS.findColumnIndex(headers, ['eROAS d730', 'eroas d730']);
  
  if (roasIdx === -1) {
    UTILS.log(`‚ùå Metrics: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ eROAS d365`);
    return;
  }
  
  UTILS.log(`üîç Metrics: –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ - eROAS d365: ${roasIdx}, eROAS d730: ${roas730Idx}`);
  
  // –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≥—Ä—É–ø–ø
  const validRows = UTILS.getValidRows(sheet, { includeGroupHeaders: true });
  const updates = [];
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –≥—Ä—É–ø–ø
  let currentGroup = [];
  let currentGroupHeader = null;
  let groupsProcessed = 0;
  
  validRows.forEach(row => {
    if (row.isGroupHeader) {
      // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –µ—Å—Ç—å
      if (currentGroupHeader && currentGroup.length > 0) {
        // eROAS d365
        let sum365 = 0, count365 = 0;
        currentGroup.forEach(groupRow => {
          const value = UTILS.parseNumber(groupRow.data[roasIdx]);
          if (value !== null) {
            sum365 += value;
            count365++;
          }
        });
        
        if (count365 > 0) {
          const avg = (sum365 / count365).toFixed(2);
          updates.push({ row: currentGroupHeader.index + 1, col: roasIdx + 1, value: avg });
        }
        
        // eROAS d730
        if (roas730Idx !== -1) {
          let sum730 = 0, count730 = 0;
          currentGroup.forEach(groupRow => {
            const value = UTILS.parseNumber(groupRow.data[roas730Idx]);
            if (value !== null) {
              sum730 += value;
              count730++;
            }
          });
          
          if (count730 > 0) {
            const avg = (sum730 / count730).toFixed(2);
            updates.push({ row: currentGroupHeader.index + 1, col: roas730Idx + 1, value: avg });
          }
        }
        
        groupsProcessed++;
      }
      
      // –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
      currentGroupHeader = row;
      currentGroup = [];
    } else if (currentGroupHeader) {
      currentGroup.push(row);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
  if (currentGroupHeader && currentGroup.length > 0) {
    // eROAS d365
    let sum365 = 0, count365 = 0;
    currentGroup.forEach(groupRow => {
      const value = UTILS.parseNumber(groupRow.data[roasIdx]);
      if (value !== null) {
        sum365 += value;
        count365++;
      }
    });
    
    if (count365 > 0) {
      const avg = (sum365 / count365).toFixed(2);
      updates.push({ row: currentGroupHeader.index + 1, col: roasIdx + 1, value: avg });
    }
    
    // eROAS d730
    if (roas730Idx !== -1) {
      let sum730 = 0, count730 = 0;
      currentGroup.forEach(groupRow => {
        const value = UTILS.parseNumber(groupRow.data[roas730Idx]);
        if (value !== null) {
          sum730 += value;
          count730++;
        }
      });
      
      if (count730 > 0) {
        const avg = (sum730 / count730).toFixed(2);
        updates.push({ row: currentGroupHeader.index + 1, col: roas730Idx + 1, value: avg });
      }
    }
    
    groupsProcessed++;
  }
  
  UTILS.log(`üìà Metrics: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: ${groupsProcessed}, –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${updates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ROAS`);
  
  if (updates.length > 0) {
    UTILS.batchUpdate(sheet, updates);
  }
  
  UTILS.log('‚úÖ Metrics: updateROASValuesOnly –∑–∞–≤–µ—Ä—à–µ–Ω');
}

function clearMetricsCache() {
  UTILS.log('üóëÔ∏è Metrics: –û—á–∏—â–∞–µ–º –∫–µ—à –º–µ—Ç—Ä–∏–∫');
  
  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  const cacheKeys = ['bundle_group_totals_', 'bundle_roas_values_'];
  cacheKeys.forEach(key => UTILS.cache.remove(key));
  
  UTILS.log('‚úÖ Metrics: –ö–µ—à –º–µ—Ç—Ä–∏–∫ –æ—á–∏—â–µ–Ω');
}