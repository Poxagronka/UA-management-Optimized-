// 08_MetricsManager.gs - –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –º–µ—Ç—Ä–∏–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
function updateEROASData() {
  UTILS.log('üìä Metrics: –ù–∞—á–∏–Ω–∞–µ–º updateEROASData - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è');
  
  // –ò—Å–∫–ª—é—á–∞–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è
  const endDate = new Date();
  endDate.setDate(endDate.getDate() - 2);
  
  const startDate = new Date(endDate);
  startDate.setDate(startDate.getDate() - 9);
  
  const adjustedRange = {
    from: UTILS.formatDate(startDate),
    to: UTILS.formatDate(endDate)
  };
  
  UTILS.log('üìÖ Metrics: –ü–µ—Ä–∏–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ - —Å ' + adjustedRange.from + ' –ø–æ ' + adjustedRange.to + ' - 10 –¥–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è');
  
  const payload = {
    operationName: "RichStats",
    variables: {
      dateFilters: [{
        dimension: "INSTALL_DATE",
        from: adjustedRange.from,
        to: adjustedRange.to,
        include: true
      }],
      filters: [
        {
          dimension: "USER",
          values: ["79950", "127168", "157350", "150140", "11628", "233863", "239157", "235837"],
          include: true
        },
        { dimension: "ATTRIBUTION_PARTNER", values: ["Stack"], include: true },
        { dimension: "ATTRIBUTION_NETWORK_HID", values: ["234187180623265792"], include: true },
        { dimension: "ATTRIBUTION_CAMPAIGN_HID", values: [], include: true, searchByString: "/tricky/i" }
      ],
      groupBy: [{ dimension: "ATTRIBUTION_CAMPAIGN_HID" }],
      measures: [
        { id: "cpi", day: null },
        { id: "installs", day: null },
        { id: "spend", day: null },
        { id: "ipm", day: null },
        { id: "retention_rate", day: 1 },
        { id: "retention_rate", day: 3 },
        { id: "retention_rate", day: 7 },
        { id: "retention_rate", day: 14 },
        { id: "retention_rate", day: 30 },
        { id: "retention_rate", day: 90 },
        { id: "retention_rate", day: 180 },
        { id: "retention_rate", day: 365 },
        { id: "roas", day: 1 },
        { id: "roas", day: 7 },
        { id: "e_arpu_forecast", day: 365 },
        { id: "e_arpu_forecast", day: 730 },
        { id: "cumulative_arpu_forecast", day: 730 },
        { id: "e_roas_forecast", day: 365 },
        { id: "e_roas_forecast", day: 730 },
        { id: "e_profit_forecast", day: 730 },
        { id: "e_revenue_forecast", day: 730 }
      ],
      havingFilters: [],
      anonymizationMode: "OFF",
      topFilter: null,
      revenuePredictionVersion: "",
      isMultiMediation: true
    },
    query: `query RichStats($dateFilters: [DateFilterInput!]!, $filters: [FilterInput!]!, $groupBy: [GroupByInput!]!, $measures: [RichMeasureInput!]!, $havingFilters: [HavingFilterInput!], $anonymizationMode: DataAnonymizationMode, $revenuePredictionVersion: String!, $topFilter: TopFilterInput, $funnelFilter: FunnelAttributes, $isMultiMediation: Boolean) {
      analytics(anonymizationMode: $anonymizationMode) {
        richStats(funnelFilter: $funnelFilter dateFilters: $dateFilters filters: $filters groupBy: $groupBy measures: $measures havingFilters: $havingFilters revenuePredictionVersion: $revenuePredictionVersion topFilter: $topFilter isMultiMediation: $isMultiMediation) {
          stats { 
            id 
            ... on UaCampaign { 
              hid campaignId campaignName targetCpa recommendedTargetCpa createdAt updatedAt lastBidChangedAt isAutomated __typename 
            } 
            ... on StatsValue { 
              value __typename 
            } 
            ... on ForecastStatsItem { 
              value uncertainForecast __typename 
            }
            ... on RetentionStatsValue {
              value cohortSize __typename
            }
            __typename 
          }
          __typename
        }
        __typename
      }
    }`
  };

  const options = {
    method: 'post',
    headers: {
      'Authorization': 'Bearer ' + UTILS.CONFIG.API_TOKEN_APPODEAL,
      'Content-Type': 'application/json'
    },
    payload: JSON.stringify(payload)
  };

  UTILS.log('üåê Metrics: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π GraphQL –∑–∞–ø—Ä–æ—Å –∫ Appodeal API');

  try {
    const response = UrlFetchApp.fetch(UTILS.CONFIG.BASE_URL_APPODEAL, options);
    const statusCode = response.getResponseCode();
    
    UTILS.log('üì° Metrics: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API - —Å—Ç–∞—Ç—É—Å: ' + statusCode);
    
    if (statusCode !== 200) {
      UTILS.log('‚ùå Metrics: –û—à–∏–±–∫–∞ API - —Å—Ç–∞—Ç—É—Å ' + statusCode);
      return UTILS.handleError(new Error('API returned ' + statusCode), 'updateEROASData');
    }
    
    const jsonResponse = JSON.parse(response.getContentText());
    
    if (jsonResponse.errors) {
      UTILS.log('‚ùå Metrics: GraphQL –æ—à–∏–±–∫–∏: ' + JSON.stringify(jsonResponse.errors));
      return UTILS.handleError(new Error('GraphQL errors'), 'updateEROASData');
    }
    
    const statsCount = jsonResponse && jsonResponse.data && jsonResponse.data.analytics && jsonResponse.data.analytics.richStats && jsonResponse.data.analytics.richStats.stats ? jsonResponse.data.analytics.richStats.stats.length : 0;
    UTILS.log('üìä Metrics: –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ' + statsCount + ' –∫–∞–º–ø–∞–Ω–∏–π');
    
    processCampaignStatsToSheet(jsonResponse);
    
    UTILS.log('‚úÖ Metrics: updateEROASData –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ - 10 –¥–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è');
    return jsonResponse;
    
  } catch (error) {
    UTILS.log('‚ùå Metrics: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ' + error.message);
    return UTILS.handleError(error, 'updateEROASData');
  }
}

function processCampaignStatsToSheet(response) {
  UTILS.log('üìù Metrics: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π - 10 –¥–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è');
  
  const ss = SpreadsheetApp.openById(UTILS.CONFIG.SPREADSHEET_ID);
  
  let statsSheet = ss.getSheetByName('AppodealStatsHidden');
  if (!statsSheet) {
    UTILS.log('üìÑ Metrics: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç AppodealStatsHidden');
    statsSheet = ss.insertSheet('AppodealStatsHidden');
    statsSheet.hideSheet();
  } else {
    UTILS.log('üìÑ Metrics: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç AppodealStatsHidden');
  }
  
  statsSheet.clear();
  
  const headers = [
    'Campaign Name', 'Campaign ID', 'Target CPA', 'Recommended Target CPA',
    'Installs', 'CPI', 'Spend', 'IPM', 
    'Retention D1', 'Retention D3', 'Retention D7', 'Retention D14', 'Retention D30', 'Retention D90', 'Retention D180', 'Retention D365',
    'ROAS D1', 'ROAS D7',
    'eARPU 365', 'eARPU 730', 'Cumulative ARPU 730',
    'eROAS 365', 'eROAS 730', 'eProfit 730', 'eRevenue 730',
    'Created At', 'Last Updated', 'Last Bid Changed', 'Is Automated'
  ];
  
  const formatValue = function(value, precision) {
    precision = precision || 2;
    if (value === null || value === undefined || value === '') return '';
    if (isNaN(value)) return '';
    return Number(value).toFixed(precision);
  };
  
  const formatDate = function(timestamp) {
    return timestamp ? new Date(timestamp * 1000).toLocaleString() : 'N/A';
  };
  
  const dataToWrite = [headers];
  let processedCampaigns = 0;
  
  if (response && response.data && response.data.analytics && response.data.analytics.richStats && response.data.analytics.richStats.stats) {
    response.data.analytics.richStats.stats.forEach(function(campaignData) {
      const campaign = campaignData[0];
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
      const values = campaignData.slice(1);
      const cpi = formatValue(values[0] ? values[0].value : null);
      const installs = formatValue(values[1] ? values[1].value : null);
      const spend = formatValue(values[2] ? values[2].value : null);
      const ipm = formatValue(values[3] ? values[3].value : null);
      const ret1 = formatValue(values[4] ? values[4].value : null);
      const ret3 = formatValue(values[5] ? values[5].value : null);
      const ret7 = formatValue(values[6] ? values[6].value : null);
      const ret14 = formatValue(values[7] ? values[7].value : null);
      const ret30 = formatValue(values[8] ? values[8].value : null);
      const ret90 = formatValue(values[9] ? values[9].value : null);
      const ret180 = formatValue(values[10] ? values[10].value : null);
      const ret365 = formatValue(values[11] ? values[11].value : null);
      const roas1 = formatValue(values[12] ? values[12].value : null);
      const roas7 = formatValue(values[13] ? values[13].value : null);
      const arpu365 = formatValue(values[14] ? values[14].value : null);
      const arpu730 = formatValue(values[15] ? values[15].value : null);
      const cumulativeArpu730 = formatValue(values[16] ? values[16].value : null);
      const eroas365 = formatValue(values[17] ? values[17].value : null);
      const eroas730 = formatValue(values[18] ? values[18].value : null);
      const profit730 = formatValue(values[19] ? values[19].value : null);
      const revenue730 = formatValue(values[20] ? values[20].value : null);
      
      if (processedCampaigns === 0) {
        UTILS.log('üîç Metrics: –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏:');
        UTILS.log('   - Campaign: ' + campaign.campaignName);
        UTILS.log('   - –í—Å–µ–≥–æ values: ' + values.length);
        UTILS.log('   - CPI (0): ' + (values[0] ? values[0].value : 'null'));
        UTILS.log('   - Installs (1): ' + (values[1] ? values[1].value : 'null'));
        UTILS.log('   - Spend (2): ' + (values[2] ? values[2].value : 'null'));
        UTILS.log('   - IPM (3): ' + (values[3] ? values[3].value : 'null'));
        UTILS.log('   - Retention D1 (4): ' + (values[4] ? values[4].value : 'null'));
        UTILS.log('   - Retention D7 (6): ' + (values[6] ? values[6].value : 'null'));
        UTILS.log('   - eROAS 730 (18): ' + (values[18] ? values[18].value : 'null'));
      }

      dataToWrite.push([
        campaign.campaignName || 'N/A',
        campaign.campaignId || 'N/A',
        formatValue(campaign.targetCpa),
        formatValue(campaign.recommendedTargetCpa),
        installs, cpi, spend, ipm,
        ret1, ret3, ret7, ret14, ret30, ret90, ret180, ret365,
        roas1, roas7,
        arpu365, arpu730, cumulativeArpu730,
        eroas365, eroas730, profit730, revenue730,
        formatDate(campaign.createdAt),
        formatDate(campaign.updatedAt),
        formatDate(campaign.lastBidChangedAt),
        campaign.isAutomated !== undefined ? campaign.isAutomated : 'N/A'
      ]);
      processedCampaigns++;
    });
  }

  UTILS.log('üìä Metrics: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ' + processedCampaigns + ' –∫–∞–º–ø–∞–Ω–∏–π');

  if (dataToWrite.length > 1) {
    statsSheet.getRange(1, 1, dataToWrite.length, headers.length).setValues(dataToWrite);
    UTILS.log('‚úÖ Metrics: –ó–∞–ø–∏—Å–∞–Ω–æ ' + (dataToWrite.length - 1) + ' —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç AppodealStatsHidden - 10 –¥–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è');
  } else {
    UTILS.log('‚ö†Ô∏è Metrics: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏');
  }
}

function updateBundleGroupedCampaigns() {
  UTILS.log('üîÑ Metrics: –ù–∞—á–∏–Ω–∞–µ–º updateBundleGroupedCampaigns - 10 –¥–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è');
  
  const spreadsheet = SpreadsheetApp.openById(UTILS.CONFIG.SPREADSHEET_ID);
  const hiddenStatsSheet = spreadsheet.getSheetByName('AppodealStatsHidden');
  const bundleGroupedSheet = spreadsheet.getSheetByName('Bundle Grouped Campaigns');
  
  if (!hiddenStatsSheet || !bundleGroupedSheet) {
    UTILS.log('‚ùå Metrics: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–∏—Å—Ç—ã - Hidden: ' + !!hiddenStatsSheet + ', Bundle: ' + !!bundleGroupedSheet);
    throw new Error('Required sheets not found');
  }
  
  const hiddenStatsData = hiddenStatsSheet.getDataRange().getValues();
  const bundleGroupedData = bundleGroupedSheet.getDataRange().getValues();
  
  UTILS.log('üìä Metrics: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - Hidden: ' + (hiddenStatsData.length - 1) + ' —Å—Ç—Ä–æ–∫, Bundle: ' + (bundleGroupedData.length - 1) + ' —Å—Ç—Ä–æ–∫');
  
  const hiddenHeaders = hiddenStatsData[0];
  const bundleHeaders = bundleGroupedData[0];
  
  const hiddenIdIdx = UTILS.findColumnIndex(hiddenHeaders, ['Campaign ID']);
  const bundleIdIdx = UTILS.findColumnIndex(bundleHeaders, ['Campaign ID/Link']);
  const bundleLocalIdx = UTILS.findColumnIndex(bundleHeaders, ['Local']);
  const hiddenAutoIdx = UTILS.findColumnIndex(hiddenHeaders, ['Is Automated']);
  const bundleAutoIdx = UTILS.findColumnIndex(bundleHeaders, ['Is Automated']);
  
  UTILS.log('üîç Metrics: –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ - Hidden ID: ' + hiddenIdIdx + ', Bundle ID: ' + bundleIdIdx + ', Local: ' + bundleLocalIdx + ', Auto: ' + hiddenAutoIdx + '/' + bundleAutoIdx);
  
  if ([hiddenIdIdx, bundleIdIdx, bundleLocalIdx, hiddenAutoIdx, bundleAutoIdx].some(function(idx) { return idx === -1; })) {
    UTILS.log('‚ùå Metrics: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏');
    throw new Error('Required columns not found');
  }
  
  const columnsToUpdate = [
    { bundleIdx: UTILS.findColumnIndex(bundleHeaders, 'eARPU 365'), hiddenIdx: UTILS.findColumnIndex(hiddenHeaders, 'eARPU 365') },
    { bundleIdx: UTILS.findColumnIndex(bundleHeaders, 'IPM'), hiddenIdx: UTILS.findColumnIndex(hiddenHeaders, 'IPM') },
    { bundleIdx: UTILS.findColumnIndex(bundleHeaders, ['eROAS d365', 'eroas d365']), hiddenIdx: UTILS.findColumnIndex(hiddenHeaders, ['eROAS 365']) },
    { bundleIdx: UTILS.findColumnIndex(bundleHeaders, ['eROAS d730', 'eroas d730']), hiddenIdx: UTILS.findColumnIndex(hiddenHeaders, ['eROAS 730']) },
    { bundleIdx: UTILS.findColumnIndex(bundleHeaders, 'eProfit d730'), hiddenIdx: UTILS.findColumnIndex(hiddenHeaders, 'eProfit 730') },
    { bundleIdx: bundleAutoIdx, hiddenIdx: hiddenAutoIdx }
  ];
  
  const validColumns = columnsToUpdate.filter(function(col) { return col.bundleIdx !== -1 && col.hiddenIdx !== -1; });
  UTILS.log('üìã Metrics: –ù–∞–π–¥–µ–Ω–æ ' + validColumns.length + ' –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
  
  const lookup = {};
  const nameIdx = UTILS.findColumnIndex(hiddenHeaders, 'Campaign Name');
  
  for (let i = 1; i < hiddenStatsData.length; i++) {
    const id = hiddenStatsData[i][hiddenIdIdx];
    const name = hiddenStatsData[i][nameIdx] || '';
    if (id) {
      lookup[id] = {
        row: hiddenStatsData[i],
        locale: UTILS.extractLocale(name)
      };
    }
  }
  
  UTILS.log('üóÇÔ∏è Metrics: –°–æ–∑–¥–∞–Ω–∞ lookup —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è ' + Object.keys(lookup).length + ' –∫–∞–º–ø–∞–Ω–∏–π');
  
  const validRows = UTILS.getValidRows(bundleGroupedSheet);
  const updates = [];
  let matchedCount = 0;
  
  validRows.forEach(function(row) {
    const id = row.data[bundleIdIdx];
    if (lookup[id]) {
      validColumns.forEach(function(col) {
        let val = lookup[id].row[col.hiddenIdx];
        if (col.divideBy) val = val / col.divideBy;
        updates.push({ row: row.index + 1, col: col.bundleIdx + 1, value: val });
      });
      
      const loc = lookup[id].locale;
      if (loc) {
        updates.push({ row: row.index + 1, col: bundleLocalIdx + 1, value: loc });
      }
      matchedCount++;
    }
  });
  
  UTILS.log('üéØ Metrics: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ' + matchedCount + ' –∫–∞–º–ø–∞–Ω–∏–π, –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ' + updates.length + ' –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
  
  if (updates.length > 0) {
    UTILS.batchUpdate(bundleGroupedSheet, updates);
    UTILS.log('‚úÖ Metrics: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ ' + updates.length + ' –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
  }
  
  UTILS.log('‚úÖ Metrics: updateBundleGroupedCampaigns –∑–∞–≤–µ—Ä—à–µ–Ω - 10 –¥–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è');
}

function groupMetrics() {
  UTILS.log('üìä Metrics: –ù–∞—á–∏–Ω–∞–µ–º groupMetrics - 10 –¥–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è, —Å—É–º–º–∞ eProfit');
  
  updateBundleGroupTotals();
  updateROASValuesOnly();
  updateOverallMetrics();
  
  UTILS.log('‚úÖ Metrics: groupMetrics –∑–∞–≤–µ—Ä—à–µ–Ω - 10 –¥–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è, —Å—É–º–º–∞ eProfit');
}

function updateBundleGroupTotals() {
  UTILS.log('üßÆ Metrics: –ù–∞—á–∏–Ω–∞–µ–º updateBundleGroupTotals - —Å—É–º–º–∞ eProfit d730 –¥–ª—è –≥—Ä—É–ø–ø');
  
  const sheet = UTILS.getSheet("Bundle Grouped Campaigns", UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) {
    UTILS.log('‚ùå Metrics: –õ–∏—Å—Ç Bundle Grouped Campaigns –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  const eProfitIdx = UTILS.findColumnIndex(headers, 'eProfit d730');
  
  if (eProfitIdx === -1) {
    UTILS.log('‚ùå Metrics: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ eProfit d730');
    return;
  }
  
  UTILS.log('üîç Metrics: –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ eProfit d730: ' + eProfitIdx);
  
  const validRows = UTILS.getValidRows(sheet, { includeGroupHeaders: true });
  const updates = [];
  let processedGroups = 0;
  
  let currentGroup = [];
  let currentGroupHeader = null;
  
  validRows.forEach(function(row) {
    if (row.isGroupHeader) {
      if (currentGroupHeader && currentGroup.length > 0) {
        // –°—Ä–µ–¥–Ω–µ–µ eProfit –∑–∞ –¥–µ–Ω—å (–¥–µ–ª–∏–º –Ω–∞ 10, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –∑–∞ 10 –¥–Ω–µ–π)
        let totalProfit = 0;
        let validCampaigns = 0;
        
        currentGroup.forEach(function(groupRow) {
          const profit = UTILS.parseNumber(groupRow.data[eProfitIdx]);
          if (profit !== null) {
            totalProfit += profit;
            validCampaigns++;
          }
        });
        
        if (validCampaigns > 0) {
          const totalProfitSum = totalProfit.toFixed(2);
          updates.push({ row: currentGroupHeader.index + 1, col: eProfitIdx + 1, value: totalProfitSum });
          processedGroups++;
          UTILS.log('üí∞ –ì—Ä—É–ø–ø–∞: ' + validCampaigns + ' –∫–∞–º–ø–∞–Ω–∏–π, —Å—É–º–º–∞ eProfit: ' + totalProfitSum);
        }
      }
      
      currentGroupHeader = row;
      currentGroup = [];
    } else if (currentGroupHeader) {
      currentGroup.push(row);
    }
  });
  
  // –ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞
  if (currentGroupHeader && currentGroup.length > 0) {
    let totalProfit = 0;
    let validCampaigns = 0;
    
    currentGroup.forEach(function(groupRow) {
      const profit = UTILS.parseNumber(groupRow.data[eProfitIdx]);
      if (profit !== null) {
        totalProfit += profit;
        validCampaigns++;
      }
    });
    
    if (validCampaigns > 0) {
      const totalProfitSum = totalProfit.toFixed(2);
      updates.push({ row: currentGroupHeader.index + 1, col: eProfitIdx + 1, value: totalProfitSum });
      processedGroups++;
      UTILS.log('üí∞ –ì—Ä—É–ø–ø–∞: ' + validCampaigns + ' –∫–∞–º–ø–∞–Ω–∏–π, —Å—É–º–º–∞ eProfit: ' + totalProfitSum);
    }
  }
  
  UTILS.log('üßÆ Metrics: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: ' + processedGroups + ', –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ' + updates.length);
  
  if (updates.length > 0) {
    UTILS.batchUpdate(sheet, updates);
  }
  
  UTILS.log('‚úÖ Metrics: updateBundleGroupTotals –∑–∞–≤–µ—Ä—à–µ–Ω - —Å—É–º–º–∞ eProfit d730 –¥–ª—è –≥—Ä—É–ø–ø');
}

function updateROASValuesOnly() {
  UTILS.log('üìà Metrics: –ù–∞—á–∏–Ω–∞–µ–º updateROASValuesOnly');
  
  const sheet = UTILS.getSheet("Bundle Grouped Campaigns", UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) {
    UTILS.log('‚ùå Metrics: –õ–∏—Å—Ç Bundle Grouped Campaigns –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  const roasIdx = UTILS.findColumnIndex(headers, 'eROAS d365');
  const roas730Idx = UTILS.findColumnIndex(headers, ['eROAS d730', 'eroas d730']);
  
  if (roasIdx === -1) {
    UTILS.log('‚ùå Metrics: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ eROAS d365');
    return;
  }
  
  UTILS.log('üîç Metrics: –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ - eROAS d365: ' + roasIdx + ', eROAS d730: ' + roas730Idx);
  
  const validRows = UTILS.getValidRows(sheet, { includeGroupHeaders: true });
  const updates = [];
  
  let currentGroup = [];
  let currentGroupHeader = null;
  let groupsProcessed = 0;
  
  validRows.forEach(function(row) {
    if (row.isGroupHeader) {
      if (currentGroupHeader && currentGroup.length > 0) {
        let sum365 = 0, count365 = 0;
        currentGroup.forEach(function(groupRow) {
          const value = UTILS.parseNumber(groupRow.data[roasIdx]);
          if (value !== null) {
            sum365 += value;
            count365++;
          }
        });
        
        if (count365 > 0) {
          const avg = (sum365 / count365).toFixed(2);
          updates.push({ row: currentGroupHeader.index + 1, col: roasIdx + 1, value: avg });
        }
        
        if (roas730Idx !== -1) {
          let sum730 = 0, count730 = 0;
          currentGroup.forEach(function(groupRow) {
            const value = UTILS.parseNumber(groupRow.data[roas730Idx]);
            if (value !== null) {
              sum730 += value;
              count730++;
            }
          });
          
          if (count730 > 0) {
            const avg = (sum730 / count730).toFixed(2);
            updates.push({ row: currentGroupHeader.index + 1, col: roas730Idx + 1, value: avg });
          }
        }
        
        groupsProcessed++;
      }
      
      currentGroupHeader = row;
      currentGroup = [];
    } else if (currentGroupHeader) {
      currentGroup.push(row);
    }
  });
  
  if (currentGroupHeader && currentGroup.length > 0) {
    let sum365 = 0, count365 = 0;
    currentGroup.forEach(function(groupRow) {
      const value = UTILS.parseNumber(groupRow.data[roasIdx]);
      if (value !== null) {
        sum365 += value;
        count365++;
      }
    });
    
    if (count365 > 0) {
      const avg = (sum365 / count365).toFixed(2);
      updates.push({ row: currentGroupHeader.index + 1, col: roasIdx + 1, value: avg });
    }
    
    if (roas730Idx !== -1) {
      let sum730 = 0, count730 = 0;
      currentGroup.forEach(function(groupRow) {
        const value = UTILS.parseNumber(groupRow.data[roas730Idx]);
        if (value !== null) {
          sum730 += value;
          count730++;
        }
      });
      
      if (count730 > 0) {
        const avg = (sum730 / count730).toFixed(2);
        updates.push({ row: currentGroupHeader.index + 1, col: roas730Idx + 1, value: avg });
      }
    }
    
    groupsProcessed++;
  }
  
  UTILS.log('üìà Metrics: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: ' + groupsProcessed + ', –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ' + updates.length + ' –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ROAS');
  
  if (updates.length > 0) {
    UTILS.batchUpdate(sheet, updates);
  }
  
  UTILS.log('‚úÖ Metrics: updateROASValuesOnly –∑–∞–≤–µ—Ä—à–µ–Ω');
}

function calculateWeightedROAS(campaignRows, roasIdx, spendIdx) {
  let totalWeightedROAS = 0;
  let totalSpend = 0;
  let validCampaigns = 0;
  
  campaignRows.forEach(function(row) {
    const roas = UTILS.parseNumber(row.data[roasIdx]);
    const spend = UTILS.parseNumber(row.data[spendIdx]);
    
    if (roas !== null && spend !== null && spend > 0) {
      totalWeightedROAS += roas * spend;
      totalSpend += spend;
      validCampaigns++;
    }
  });
  
  if (totalSpend > 0 && validCampaigns > 0) {
    const weightedAvg = (totalWeightedROAS / totalSpend).toFixed(2);
    UTILS.log('üìà Metrics: –í–∑–≤–µ—à–µ–Ω–Ω—ã–π eROAS d730 - –ö–∞–º–ø–∞–Ω–∏–π: ' + validCampaigns + '/' + campaignRows.length + ', –û–±—â–∏–π —Å–ø–µ–Ω–¥: ' + totalSpend.toFixed(2) + ', –†–µ–∑—É–ª—å—Ç–∞—Ç: ' + weightedAvg + '%');
    return weightedAvg;
  }
  
  return null;
}

function updateOverallMetrics() {
  UTILS.log('üåç Metrics: –ù–∞—á–∏–Ω–∞–µ–º updateOverallMetrics –¥–ª—è —Å—Ç—Ä–æ–∫–∏ Overall');
  
  const sheet = UTILS.getSheet("Bundle Grouped Campaigns", UTILS.CONFIG.SPREADSHEET_ID);
  if (!sheet) {
    UTILS.log('‚ùå Metrics: –õ–∏—Å—Ç Bundle Grouped Campaigns –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  
  const roas730Idx = UTILS.findColumnIndex(headers, ['eROAS d730', 'eroas d730']);
  const eProfit730Idx = UTILS.findColumnIndex(headers, ['eProfit d730', 'eprofit d730']);
  const spendIdx = UTILS.findColumnIndex(headers, ['spend in the last 14 days', 'today spend', 'spend']);
  
  if (roas730Idx === -1 || eProfit730Idx === -1) {
    UTILS.log('‚ùå Metrics: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ - eROAS d730: ' + roas730Idx + ', eProfit d730: ' + eProfit730Idx);
    return;
  }
  
  if (spendIdx === -1) {
    UTILS.log('‚ùå Metrics: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ Spend –¥–ª—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è');
    return;
  }
  
  UTILS.log('üîç Metrics: –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ - eROAS d730: ' + roas730Idx + ', eProfit d730: ' + eProfit730Idx + ', Spend: ' + spendIdx);
  
  let overallRowIndex = -1;
  for (let i = 1; i < data.length; i++) {
    const cellValue = String(data[i][0] || '').toLowerCase().trim();
    if (cellValue === 'overall') {
      overallRowIndex = i;
      break;
    }
  }
  
  if (overallRowIndex === -1) {
    UTILS.log('‚ùå Metrics: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ Overall');
    return;
  }
  
  UTILS.log('üéØ Metrics: –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ Overall –≤ –ø–æ–∑–∏—Ü–∏–∏ ' + (overallRowIndex + 1));
  
  const validRows = UTILS.getValidRows(sheet, { startRow: 1 });
  const campaignRows = validRows.filter(function(row) {
    return row.index !== overallRowIndex && !row.isGroupHeader;
  });
  
  UTILS.log('üìä Metrics: –ù–∞–π–¥–µ–Ω–æ ' + campaignRows.length + ' –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Overall');
  
  if (campaignRows.length === 0) {
    UTILS.log('‚ö†Ô∏è Metrics: –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Overall');
    return;
  }
  
  const overallWeightedROAS = calculateWeightedROAS(campaignRows, roas730Idx, spendIdx);
  
  let totalProfit = 0;
  let validProfitCampaigns = 0;
  
  campaignRows.forEach(function(row) {
    const profit = UTILS.parseNumber(row.data[eProfit730Idx]);
    if (profit !== null) {
      totalProfit += profit;
      validProfitCampaigns++;
    }
  });
  
  // –°—É–º–º–∞ eProfit
  UTILS.log('üí∞ Metrics: Overall —Å—É–º–º–∞ eProfit d730 - –ö–∞–º–ø–∞–Ω–∏–π: ' + validProfitCampaigns + '/' + campaignRows.length + ', –û–±—â–∞—è —Å—É–º–º–∞: ' + totalProfit.toFixed(2));
  
  const updates = [];
  
  if (overallWeightedROAS !== null) {
    updates.push({
      row: overallRowIndex + 1,
      col: roas730Idx + 1,
      value: overallWeightedROAS
    });
    UTILS.log('üìà Metrics: Overall –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π eROAS d730: ' + overallWeightedROAS + '%');
  }
  
  if (validProfitCampaigns > 0) {
    updates.push({
      row: overallRowIndex + 1,
      col: eProfit730Idx + 1,
      value: totalProfit.toFixed(2)
    });
    UTILS.log('üí∞ Metrics: Overall —Å—É–º–º–∞ eProfit d730: ' + totalProfit.toFixed(2));
  }
  
  if (updates.length > 0) {
    UTILS.batchUpdate(sheet, updates);
    UTILS.log('‚úÖ Metrics: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ ' + updates.length + ' –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–æ–∫–∏ Overall');
  }
  
  UTILS.log('‚úÖ Metrics: updateOverallMetrics –∑–∞–≤–µ—Ä—à–µ–Ω');
}

function clearMetricsCache() {
  UTILS.log('üóëÔ∏è Metrics: –û—á–∏—â–∞–µ–º –∫–µ—à –º–µ—Ç—Ä–∏–∫ - 10 –¥–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è');
  
  const cacheKeys = ['bundle_group_totals_', 'weighted_roas_values_730_'];
  cacheKeys.forEach(function(key) { UTILS.cache.remove(key); });
  
  UTILS.log('‚úÖ Metrics: –ö–µ—à –º–µ—Ç—Ä–∏–∫ –æ—á–∏—â–µ–Ω - 10 –¥–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è');
}