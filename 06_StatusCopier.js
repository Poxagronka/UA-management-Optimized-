// 06_StatusCopier.gs - –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
function copyStatusToTarget() {
  UTILS.log('üìã StatusCopier: –ù–∞—á–∏–Ω–∞–µ–º copyStatusToTarget');
  
  const startTime = new Date();
  const MAX_EXECUTION_TIME = 270000;
  const SHEET_NAME = 'Planning';

  try {
    const sourceSheet = UTILS.getSheet(SHEET_NAME, UTILS.CONFIG.SPREADSHEET_ID);
    const targetSheet = UTILS.getSheet(SHEET_NAME, UTILS.CONFIG.TARGET_SPREADSHEET_ID);
    
    if (!sourceSheet || !targetSheet) {
      UTILS.log(`‚ùå StatusCopier: –õ–∏—Å—Ç ${SHEET_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω - Source: ${!!sourceSheet}, Target: ${!!targetSheet}`);
      throw new Error(`–õ–∏—Å—Ç ${SHEET_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–¥–Ω–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü`);
    }
    
    UTILS.log(`‚úÖ StatusCopier: –ù–∞–π–¥–µ–Ω—ã –æ–±–∞ –ª–∏—Å—Ç–∞ ${SHEET_NAME}`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    const sourceRange = sourceSheet.getDataRange();
    const sourceValues = sourceRange.getValues();
    const sourceBackgrounds = sourceRange.getBackgrounds();
    
    UTILS.log(`üìä StatusCopier: –ò—Å—Ç–æ—á–Ω–∏–∫ - ${sourceValues.length - 1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    
    const sourceHeaders = sourceValues[0];
    const sourceCampaignIdColIdx = UTILS.findColumnIndex(sourceHeaders, ['campaign id/link']);
    const sourceStatusColIdx = UTILS.findColumnIndex(sourceHeaders, ['test status', 'status']);
    
    if (sourceCampaignIdColIdx === -1 || sourceStatusColIdx === -1) {
      UTILS.log(`‚ùå StatusCopier: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ - Campaign ID: ${sourceCampaignIdColIdx}, Status: ${sourceStatusColIdx}`);
      throw new Error(`–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. Campaign ID: ${sourceCampaignIdColIdx}, Status: ${sourceStatusColIdx}`);
    }
    
    UTILS.log(`üîç StatusCopier: –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ - Campaign ID: ${sourceCampaignIdColIdx}, Status: ${sourceStatusColIdx}`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    const targetValues = targetSheet.getDataRange().getValues();
    UTILS.log(`üìä StatusCopier: –¶–µ–ª—å - ${targetValues.length - 1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Campaign ID –≤ –∫–æ–ª–æ–Ω–∫–µ J - –∏–Ω–¥–µ–∫—Å 9)
    const campaignMap = {};
    let targetCampaignCount = 0;
    
    for (let i = 1; i < targetValues.length; i++) {
      const campaignId = targetValues[i][9]; // –ö–æ–ª–æ–Ω–∫–∞ J
      if (campaignId) {
        campaignMap[String(campaignId)] = i + 1;
        targetCampaignCount++;
      }
      
      if (Date.now() - startTime.getTime() > MAX_EXECUTION_TIME) {
        UTILS.log(`‚è∞ StatusCopier: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã`);
        throw new Error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã");
      }
    }
    
    UTILS.log(`üóÇÔ∏è StatusCopier: –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –¥–ª—è ${targetCampaignCount} –∫–∞–º–ø–∞–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ`);
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    const updates = [];
    let updatedCount = 0;
    let matchedCampaigns = 0;
    let skippedByMissingId = 0;
    
    for (let i = 1; i < sourceValues.length; i++) {
      const campaignId = UTILS.extractCampaignId(sourceValues[i][sourceCampaignIdColIdx]);
      if (!campaignId) {
        skippedByMissingId++;
        continue;
      }
      
      const targetRowIndex = campaignMap[String(campaignId)];
      if (!targetRowIndex) continue;
      
      matchedCampaigns++;
      const sourceStatus = sourceValues[i][sourceStatusColIdx];
      const sourceBackground = sourceBackgrounds[i][sourceStatusColIdx];
      
      updates.push({
        row: targetRowIndex,
        col: 9, // –ö–æ–ª–æ–Ω–∫–∞ I (—Å—Ç–∞—Ç—É—Å)
        value: sourceStatus,
        background: sourceBackground,
        campaignId: campaignId
      });
      
      updatedCount++;
      
      if (Date.now() - startTime.getTime() > MAX_EXECUTION_TIME) {
        UTILS.log(`‚è∞ StatusCopier: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
        break;
      }
    }
    
    UTILS.log(`üìä StatusCopier: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è - –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${matchedCampaigns}, –ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é: ${updatedCount}, –ü—Ä–æ–ø—É—â–µ–Ω–æ –±–µ–∑ ID: ${skippedByMissingId}`);
    
    if (updates.length === 0) {
      UTILS.log(`‚ö†Ô∏è StatusCopier: –ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è`);
      return `–ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è`;
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–∞–∫–µ—Ç–∞–º–∏
    const batchSize = 20;
    let appliedUpdates = 0;
    
    UTILS.log(`üì¶ StatusCopier: –ü—Ä–∏–º–µ–Ω—è–µ–º ${updates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞—Ç—á–∞–º–∏ –ø–æ ${batchSize}`);
    
    for (let i = 0; i < updates.length; i += batchSize) {
      const batch = updates.slice(i, i + batchSize);
      const batchNum = Math.floor(i / batchSize) + 1;
      const totalBatches = Math.ceil(updates.length / batchSize);
      
      UTILS.log(`‚ö° StatusCopier: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${batchNum}/${totalBatches} (${batch.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)`);
      
      batch.forEach(update => {
        try {
          const cell = targetSheet.getRange(update.row, update.col);
          cell.setValue(update.value);
          if (update.background) {
            cell.setBackground(update.background);
          }
          appliedUpdates++;
        } catch (error) {
          UTILS.log(`‚ùå StatusCopier: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ ${update.campaignId}: ${error.message}`);
        }
      });
      
      if (i % (batchSize * 2) === 0) {
        SpreadsheetApp.flush();
        UTILS.log(`üíæ StatusCopier: –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${appliedUpdates} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
      }
      
      if (Date.now() - startTime.getTime() > MAX_EXECUTION_TIME) {
        const partialResult = `–ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${appliedUpdates} —Å—Ç—Ä–æ–∫ (–ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ —Ç–∞–π–º-–∞—É—Ç—É)`;
        UTILS.log(`‚è∞ StatusCopier: ${partialResult}`);
        return partialResult;
      }
    }
    
    SpreadsheetApp.flush();
    
    const executionTime = (Date.now() - startTime.getTime()) / 1000;
    const result = `–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${appliedUpdates} —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞ ${executionTime.toFixed(1)}—Å`;
    
    UTILS.log(`‚úÖ StatusCopier: ${result}`);
    return result;
    
  } catch (error) {
    const errorResult = UTILS.handleError(error, 'copyStatusToTarget');
    UTILS.log(`‚ùå StatusCopier: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`);
    return errorResult;
  }
}